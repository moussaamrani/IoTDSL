/*
 * generated by Xtext 2.10.0
 */
grammar InternalIoTDSL;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package be.unamur.iotdsl.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package be.unamur.iotdsl.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import be.unamur.iotdsl.xtext.services.IoTDSLGrammarAccess;

}
@parser::members {
	private IoTDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(IoTDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleIoTModel
entryRuleIoTModel
:
{ before(grammarAccess.getIoTModelRule()); }
	 ruleIoTModel
{ after(grammarAccess.getIoTModelRule()); } 
	 EOF 
;

// Rule IoTModel
ruleIoTModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIoTModelAccess().getGroup()); }
		(rule__IoTModel__Group__0)
		{ after(grammarAccess.getIoTModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaredType
entryRuleDeclaredType
:
{ before(grammarAccess.getDeclaredTypeRule()); }
	 ruleDeclaredType
{ after(grammarAccess.getDeclaredTypeRule()); } 
	 EOF 
;

// Rule DeclaredType
ruleDeclaredType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclaredTypeAccess().getAlternatives()); }
		(rule__DeclaredType__Alternatives)
		{ after(grammarAccess.getDeclaredTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumeration
entryRuleEnumeration
:
{ before(grammarAccess.getEnumerationRule()); }
	 ruleEnumeration
{ after(grammarAccess.getEnumerationRule()); } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumerationAccess().getGroup()); }
		(rule__Enumeration__Group__0)
		{ after(grammarAccess.getEnumerationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEnumerationLiteral
entryRuleEnumerationLiteral
:
{ before(grammarAccess.getEnumerationLiteralRule()); }
	 ruleEnumerationLiteral
{ after(grammarAccess.getEnumerationLiteralRule()); } 
	 EOF 
;

// Rule EnumerationLiteral
ruleEnumerationLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEnumerationLiteralAccess().getGroup()); }
		(rule__EnumerationLiteral__Group__0)
		{ after(grammarAccess.getEnumerationLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimitiveType
entryRulePrimitiveType
:
{ before(grammarAccess.getPrimitiveTypeRule()); }
	 rulePrimitiveType
{ after(grammarAccess.getPrimitiveTypeRule()); } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
		(rule__PrimitiveType__Alternatives)
		{ after(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntegerType
entryRuleIntegerType
:
{ before(grammarAccess.getIntegerTypeRule()); }
	 ruleIntegerType
{ after(grammarAccess.getIntegerTypeRule()); } 
	 EOF 
;

// Rule IntegerType
ruleIntegerType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegerTypeAccess().getGroup()); }
		(rule__IntegerType__Group__0)
		{ after(grammarAccess.getIntegerTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanType
entryRuleBooleanType
:
{ before(grammarAccess.getBooleanTypeRule()); }
	 ruleBooleanType
{ after(grammarAccess.getBooleanTypeRule()); } 
	 EOF 
;

// Rule BooleanType
ruleBooleanType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanTypeAccess().getGroup()); }
		(rule__BooleanType__Group__0)
		{ after(grammarAccess.getBooleanTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringType
entryRuleStringType
:
{ before(grammarAccess.getStringTypeRule()); }
	 ruleStringType
{ after(grammarAccess.getStringTypeRule()); } 
	 EOF 
;

// Rule StringType
ruleStringType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringTypeAccess().getGroup()); }
		(rule__StringType__Group__0)
		{ after(grammarAccess.getStringTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRealType
entryRuleRealType
:
{ before(grammarAccess.getRealTypeRule()); }
	 ruleRealType
{ after(grammarAccess.getRealTypeRule()); } 
	 EOF 
;

// Rule RealType
ruleRealType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRealTypeAccess().getGroup()); }
		(rule__RealType__Group__0)
		{ after(grammarAccess.getRealTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNode
entryRuleNode
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeAccess().getAlternatives()); }
		(rule__Node__Alternatives)
		{ after(grammarAccess.getNodeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGateway
entryRuleGateway
:
{ before(grammarAccess.getGatewayRule()); }
	 ruleGateway
{ after(grammarAccess.getGatewayRule()); } 
	 EOF 
;

// Rule Gateway
ruleGateway 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGatewayAccess().getGroup()); }
		(rule__Gateway__Group__0)
		{ after(grammarAccess.getGatewayAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDevice
entryRuleDevice
:
{ before(grammarAccess.getDeviceRule()); }
	 ruleDevice
{ after(grammarAccess.getDeviceRule()); } 
	 EOF 
;

// Rule Device
ruleDevice 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeviceAccess().getGroup()); }
		(rule__Device__Group__0)
		{ after(grammarAccess.getDeviceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNamedTypedElement
entryRuleNamedTypedElement
:
{ before(grammarAccess.getNamedTypedElementRule()); }
	 ruleNamedTypedElement
{ after(grammarAccess.getNamedTypedElementRule()); } 
	 EOF 
;

// Rule NamedTypedElement
ruleNamedTypedElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNamedTypedElementAccess().getAlternatives()); }
		(rule__NamedTypedElement__Alternatives)
		{ after(grammarAccess.getNamedTypedElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeature
entryRuleFeature
:
{ before(grammarAccess.getFeatureRule()); }
	 ruleFeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule Feature
ruleFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureAccess().getAlternatives()); }
		(rule__Feature__Alternatives)
		{ after(grammarAccess.getFeatureAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProperty
entryRuleProperty
:
{ before(grammarAccess.getPropertyRule()); }
	 ruleProperty
{ after(grammarAccess.getPropertyRule()); } 
	 EOF 
;

// Rule Property
ruleProperty 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPropertyAccess().getGroup()); }
		(rule__Property__Group__0)
		{ after(grammarAccess.getPropertyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvent
entryRuleEvent
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventAccess().getGroup()); }
		(rule__Event__Group__0)
		{ after(grammarAccess.getEventAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeReference
entryRuleTypeReference
:
{ before(grammarAccess.getTypeReferenceRule()); }
	 ruleTypeReference
{ after(grammarAccess.getTypeReferenceRule()); } 
	 EOF 
;

// Rule TypeReference
ruleTypeReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeReferenceAccess().getAlternatives()); }
		(rule__TypeReference__Alternatives)
		{ after(grammarAccess.getTypeReferenceAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValidID
entryRuleValidID
:
{ before(grammarAccess.getValidIDRule()); }
	 ruleValidID
{ after(grammarAccess.getValidIDRule()); } 
	 EOF 
;

// Rule ValidID
ruleValidID 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule EventType
ruleEventType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventTypeAccess().getAlternatives()); }
		(rule__EventType__Alternatives)
		{ after(grammarAccess.getEventTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getDeclaredTypeParserRuleCall_0()); }
		ruleDeclaredType
		{ after(grammarAccess.getTypeAccess().getDeclaredTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_1()); }
		rulePrimitiveType
		{ after(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclaredTypeAccess().getNodeParserRuleCall_0()); }
		ruleNode
		{ after(grammarAccess.getDeclaredTypeAccess().getNodeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDeclaredTypeAccess().getEnumerationParserRuleCall_1()); }
		ruleEnumeration
		{ after(grammarAccess.getDeclaredTypeAccess().getEnumerationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getIntegerTypeParserRuleCall_0()); }
		ruleIntegerType
		{ after(grammarAccess.getPrimitiveTypeAccess().getIntegerTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getBooleanTypeParserRuleCall_1()); }
		ruleBooleanType
		{ after(grammarAccess.getPrimitiveTypeAccess().getBooleanTypeParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getStringTypeParserRuleCall_2()); }
		ruleStringType
		{ after(grammarAccess.getPrimitiveTypeAccess().getStringTypeParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getRealTypeParserRuleCall_3()); }
		ruleRealType
		{ after(grammarAccess.getPrimitiveTypeAccess().getRealTypeParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getGatewayParserRuleCall_0()); }
		ruleGateway
		{ after(grammarAccess.getNodeAccess().getGatewayParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNodeAccess().getDeviceParserRuleCall_1()); }
		ruleDevice
		{ after(grammarAccess.getNodeAccess().getDeviceParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Gateway__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGatewayAccess().getGatewayKeyword_1_0()); }
		'gateway'
		{ after(grammarAccess.getGatewayAccess().getGatewayKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getGatewayAccess().getMiddlewareKeyword_1_1()); }
		'middleware'
		{ after(grammarAccess.getGatewayAccess().getMiddlewareKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NamedTypedElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNamedTypedElementAccess().getPropertyParserRuleCall_0()); }
		ruleProperty
		{ after(grammarAccess.getNamedTypedElementAccess().getPropertyParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNamedTypedElementAccess().getParameterParserRuleCall_1()); }
		ruleParameter
		{ after(grammarAccess.getNamedTypedElementAccess().getParameterParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureAccess().getPropertyParserRuleCall_0()); }
		ruleProperty
		{ after(grammarAccess.getFeatureAccess().getPropertyParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getFeatureAccess().getEventParserRuleCall_1()); }
		ruleEvent
		{ after(grammarAccess.getFeatureAccess().getEventParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeReferenceAccess().getPtypeAssignment_0()); }
		(rule__TypeReference__PtypeAssignment_0)
		{ after(grammarAccess.getTypeReferenceAccess().getPtypeAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeReferenceAccess().getDtypeAssignment_1()); }
		(rule__TypeReference__DtypeAssignment_1)
		{ after(grammarAccess.getTypeReferenceAccess().getDtypeAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EventType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventTypeAccess().getSENSINGEnumLiteralDeclaration_0()); }
		('sensing')
		{ after(grammarAccess.getEventTypeAccess().getSENSINGEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getEventTypeAccess().getACTUATINGEnumLiteralDeclaration_1()); }
		('actuating')
		{ after(grammarAccess.getEventTypeAccess().getACTUATINGEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IoTModel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IoTModel__Group__0__Impl
	rule__IoTModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IoTModel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIoTModelAccess().getIoTModelAction_0()); }
	()
	{ after(grammarAccess.getIoTModelAccess().getIoTModelAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IoTModel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IoTModel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IoTModel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIoTModelAccess().getTypesAssignment_1()); }
	(rule__IoTModel__TypesAssignment_1)*
	{ after(grammarAccess.getIoTModelAccess().getTypesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__0__Impl
	rule__Enumeration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getEnumerationKeyword_0()); }
	'enumeration'
	{ after(grammarAccess.getEnumerationAccess().getEnumerationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__1__Impl
	rule__Enumeration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getNameAssignment_1()); }
	(rule__Enumeration__NameAssignment_1)
	{ after(grammarAccess.getEnumerationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__2__Impl
	rule__Enumeration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__3__Impl
	rule__Enumeration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getGroup_3()); }
	(rule__Enumeration__Group_3__0)*
	{ after(grammarAccess.getEnumerationAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group_3__0__Impl
	rule__Enumeration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getLiteralsAssignment_3_0()); }
	(rule__Enumeration__LiteralsAssignment_3_0)
	{ after(grammarAccess.getEnumerationAccess().getLiteralsAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Enumeration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationAccess().getSemicolonKeyword_3_1()); }
	';'
	{ after(grammarAccess.getEnumerationAccess().getSemicolonKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumerationLiteral__Group__0__Impl
	rule__EnumerationLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationLiteralAccess().getEnumerationLiteralAction_0()); }
	()
	{ after(grammarAccess.getEnumerationLiteralAccess().getEnumerationLiteralAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EnumerationLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEnumerationLiteralAccess().getNameAssignment_1()); }
	(rule__EnumerationLiteral__NameAssignment_1)
	{ after(grammarAccess.getEnumerationLiteralAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegerType__Group__0__Impl
	rule__IntegerType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerTypeAccess().getIntegerTypeAction_0()); }
	()
	{ after(grammarAccess.getIntegerTypeAccess().getIntegerTypeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegerType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerTypeAccess().getNameAssignment_1()); }
	(rule__IntegerType__NameAssignment_1)
	{ after(grammarAccess.getIntegerTypeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanType__Group__0__Impl
	rule__BooleanType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0()); }
	()
	{ after(grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanTypeAccess().getNameAssignment_1()); }
	(rule__BooleanType__NameAssignment_1)
	{ after(grammarAccess.getBooleanTypeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringType__Group__0__Impl
	rule__StringType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringTypeAccess().getStringTypeAction_0()); }
	()
	{ after(grammarAccess.getStringTypeAccess().getStringTypeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringTypeAccess().getNameAssignment_1()); }
	(rule__StringType__NameAssignment_1)
	{ after(grammarAccess.getStringTypeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RealType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RealType__Group__0__Impl
	rule__RealType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealTypeAccess().getRealTypeAction_0()); }
	()
	{ after(grammarAccess.getRealTypeAccess().getRealTypeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RealType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealTypeAccess().getNameAssignment_1()); }
	(rule__RealType__NameAssignment_1)
	{ after(grammarAccess.getRealTypeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Gateway__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Gateway__Group__0__Impl
	rule__Gateway__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Gateway__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGatewayAccess().getGatewayAction_0()); }
	()
	{ after(grammarAccess.getGatewayAccess().getGatewayAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Gateway__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Gateway__Group__1__Impl
	rule__Gateway__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Gateway__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGatewayAccess().getAlternatives_1()); }
	(rule__Gateway__Alternatives_1)
	{ after(grammarAccess.getGatewayAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Gateway__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Gateway__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Gateway__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGatewayAccess().getNameAssignment_2()); }
	(rule__Gateway__NameAssignment_2)
	{ after(grammarAccess.getGatewayAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Device__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Device__Group__0__Impl
	rule__Device__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeviceAccess().getDeviceAction_0()); }
	()
	{ after(grammarAccess.getDeviceAccess().getDeviceAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Device__Group__1__Impl
	rule__Device__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeviceAccess().getDeviceKeyword_1()); }
	'device'
	{ after(grammarAccess.getDeviceAccess().getDeviceKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Device__Group__2__Impl
	rule__Device__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeviceAccess().getNameAssignment_2()); }
	(rule__Device__NameAssignment_2)
	{ after(grammarAccess.getDeviceAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Device__Group__3__Impl
	rule__Device__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeviceAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getDeviceAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Device__Group__4__Impl
	rule__Device__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeviceAccess().getFeaturesAssignment_4()); }
	(rule__Device__FeaturesAssignment_4)*
	{ after(grammarAccess.getDeviceAccess().getFeaturesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Device__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeviceAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getDeviceAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property__Group__0__Impl
	rule__Property__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyAccess().getPropertyKeyword_0()); }
	'property'
	{ after(grammarAccess.getPropertyAccess().getPropertyKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property__Group__1__Impl
	rule__Property__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyAccess().getNameAssignment_1()); }
	(rule__Property__NameAssignment_1)
	{ after(grammarAccess.getPropertyAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property__Group__2__Impl
	rule__Property__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getPropertyAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPropertyAccess().getTypeAssignment_3()); }
	(rule__Property__TypeAssignment_3)
	{ after(grammarAccess.getPropertyAccess().getTypeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getKindAssignment_0()); }
	(rule__Event__KindAssignment_0)
	{ after(grammarAccess.getEventAccess().getKindAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__1__Impl
	rule__Event__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getNameAssignment_1()); }
	(rule__Event__NameAssignment_1)
	{ after(grammarAccess.getEventAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getGroup_2()); }
	(rule__Event__Group_2__0)?
	{ after(grammarAccess.getEventAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_2__0__Impl
	rule__Event__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getEventAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_2__1__Impl
	rule__Event__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getGroup_2_1()); }
	(rule__Event__Group_2_1__0)?
	{ after(grammarAccess.getEventAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getEventAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_2_1__0__Impl
	rule__Event__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getParametersAssignment_2_1_0()); }
	(rule__Event__ParametersAssignment_2_1_0)
	{ after(grammarAccess.getEventAccess().getParametersAssignment_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getGroup_2_1_1()); }
	(rule__Event__Group_2_1_1__0)*
	{ after(grammarAccess.getEventAccess().getGroup_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_2_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_2_1_1__0__Impl
	rule__Event__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getCommaKeyword_2_1_1_0()); }
	','
	{ after(grammarAccess.getEventAccess().getCommaKeyword_2_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Event__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_2_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEventAccess().getParametersAssignment_2_1_1_1()); }
	(rule__Event__ParametersAssignment_2_1_1_1)
	{ after(grammarAccess.getEventAccess().getParametersAssignment_2_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getNameAssignment_0()); }
	(rule__Parameter__NameAssignment_0)
	{ after(grammarAccess.getParameterAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getParameterAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getTypeAssignment_2()); }
	(rule__Parameter__TypeAssignment_2)
	{ after(grammarAccess.getParameterAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); }
	ruleValidID
	{ after(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	('.')
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); }
	ruleValidID
	{ after(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IoTModel__TypesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIoTModelAccess().getTypesTypeParserRuleCall_1_0()); }
		ruleType
		{ after(grammarAccess.getIoTModelAccess().getTypesTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationAccess().getNameValidIDParserRuleCall_1_0()); }
		ruleValidID
		{ after(grammarAccess.getEnumerationAccess().getNameValidIDParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__LiteralsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationAccess().getLiteralsEnumerationLiteralParserRuleCall_3_0_0()); }
		ruleEnumerationLiteral
		{ after(grammarAccess.getEnumerationAccess().getLiteralsEnumerationLiteralParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteral__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEnumerationLiteralAccess().getNameValidIDParserRuleCall_1_0()); }
		ruleValidID
		{ after(grammarAccess.getEnumerationLiteralAccess().getNameValidIDParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerTypeAccess().getNameIntegerKeyword_1_0()); }
		(
			{ before(grammarAccess.getIntegerTypeAccess().getNameIntegerKeyword_1_0()); }
			'integer'
			{ after(grammarAccess.getIntegerTypeAccess().getNameIntegerKeyword_1_0()); }
		)
		{ after(grammarAccess.getIntegerTypeAccess().getNameIntegerKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanType__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanTypeAccess().getNameBooleanKeyword_1_0()); }
		(
			{ before(grammarAccess.getBooleanTypeAccess().getNameBooleanKeyword_1_0()); }
			'boolean'
			{ after(grammarAccess.getBooleanTypeAccess().getNameBooleanKeyword_1_0()); }
		)
		{ after(grammarAccess.getBooleanTypeAccess().getNameBooleanKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringType__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringTypeAccess().getNameStringKeyword_1_0()); }
		(
			{ before(grammarAccess.getStringTypeAccess().getNameStringKeyword_1_0()); }
			'string'
			{ after(grammarAccess.getStringTypeAccess().getNameStringKeyword_1_0()); }
		)
		{ after(grammarAccess.getStringTypeAccess().getNameStringKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealType__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealTypeAccess().getNameRealKeyword_1_0()); }
		(
			{ before(grammarAccess.getRealTypeAccess().getNameRealKeyword_1_0()); }
			'real'
			{ after(grammarAccess.getRealTypeAccess().getNameRealKeyword_1_0()); }
		)
		{ after(grammarAccess.getRealTypeAccess().getNameRealKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Gateway__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGatewayAccess().getNameValidIDParserRuleCall_2_0()); }
		ruleValidID
		{ after(grammarAccess.getGatewayAccess().getNameValidIDParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeviceAccess().getNameValidIDParserRuleCall_2_0()); }
		ruleValidID
		{ after(grammarAccess.getDeviceAccess().getNameValidIDParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__FeaturesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeviceAccess().getFeaturesFeatureParserRuleCall_4_0()); }
		ruleFeature
		{ after(grammarAccess.getDeviceAccess().getFeaturesFeatureParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getNameValidIDParserRuleCall_1_0()); }
		ruleValidID
		{ after(grammarAccess.getPropertyAccess().getNameValidIDParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__TypeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPropertyAccess().getTypeTypeReferenceParserRuleCall_3_0()); }
		ruleTypeReference
		{ after(grammarAccess.getPropertyAccess().getTypeTypeReferenceParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__KindAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getKindEventTypeEnumRuleCall_0_0()); }
		ruleEventType
		{ after(grammarAccess.getEventAccess().getKindEventTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getNameValidIDParserRuleCall_1_0()); }
		ruleValidID
		{ after(grammarAccess.getEventAccess().getNameValidIDParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__ParametersAssignment_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getParametersParameterParserRuleCall_2_1_0_0()); }
		ruleParameter
		{ after(grammarAccess.getEventAccess().getParametersParameterParserRuleCall_2_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__ParametersAssignment_2_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getParametersParameterParserRuleCall_2_1_1_1_0()); }
		ruleParameter
		{ after(grammarAccess.getEventAccess().getParametersParameterParserRuleCall_2_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getNameValidIDParserRuleCall_0_0()); }
		ruleValidID
		{ after(grammarAccess.getParameterAccess().getNameValidIDParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getTypeTypeReferenceParserRuleCall_2_0()); }
		ruleTypeReference
		{ after(grammarAccess.getParameterAccess().getTypeTypeReferenceParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__PtypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeReferenceAccess().getPtypePrimitiveTypeParserRuleCall_0_0()); }
		rulePrimitiveType
		{ after(grammarAccess.getTypeReferenceAccess().getPtypePrimitiveTypeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__DtypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeReferenceAccess().getDtypeDeclaredTypeCrossReference_1_0()); }
		(
			{ before(grammarAccess.getTypeReferenceAccess().getDtypeDeclaredTypeQualifiedNameParserRuleCall_1_0_1()); }
			ruleQualifiedName
			{ after(grammarAccess.getTypeReferenceAccess().getDtypeDeclaredTypeQualifiedNameParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getTypeReferenceAccess().getDtypeDeclaredTypeCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
