// automatically generated by Xtext
grammar be.unamur.iotdsl.xtext.IoTDSL with org.eclipse.xtext.common.Terminals

import "https://www.unamur.be/iotdsl" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


IoTModel returns IoTModel:
	{IoTModel} 
	(types+=Type)* 
//	(configuration+=NetworkConfiguration)* 
//	(rules+=Rule)* 
;

NamedElement: 
	Type | EnumerationLiteral | NamedTypedElement
;


Type returns Type:
	DeclaredType | PrimitiveType;


DeclaredType: 
	Node | Enumeration 
;
 
Enumeration:
	'enumeration' name=ValidID '{'
		(literals += EnumerationLiteral ';')*
	'}'
;

EnumerationLiteral:
	{EnumerationLiteral} name=ValidID
;


PrimitiveType:
	IntegerType | BooleanType | StringType | RealType
;
IntegerType: {IntegerType} name="integer";
BooleanType: {BooleanType} name="boolean";
StringType:  {StringType}  name="string";
RealType:    {RealType}    name="real";

Node returns Node:
	Gateway | Device
;
 
Gateway returns Gateway:
	{Gateway} ('gateway' | 'middleware') name=ValidID;

Device returns Device:
	{Device} 'device' name=ValidID '{' (features += Feature*) '}';

NamedTypedElement:
	Property | Parameter
;

Feature returns Feature:
	Property | Event;

Property returns Property:
	'property' name=ValidID ':' type=TypeReference
;

Event returns Event:
	kind=EventType name=ValidID ('(' 
		(parameters += Parameter (',' parameters += Parameter)*)? 
	')')?
;


enum EventType:
	SENSING='sensing' | ACTUATING='actuating'
;

Parameter returns Parameter:
	name=ValidID ':' type=TypeReference
;

TypeReference:
	ptype = PrimitiveType | dtype = [DeclaredType|QualifiedName]
;

QualifiedName:
  ValidID (=>'.' ValidID)*
;

ValidID:
	ID
;


//EString returns ecore::EString:
//	STRING | ID;
	