/**
 * generated by Xtext 2.10.0
 */
package be.unamur.iotdsl.xtext.tests.validation;

import be.unamur.iotdsl.xtext.tests.IoTDSLInjectorProvider;
import be.unamur.iotdsl.xtext.validation.IoTDSLDuplicateValidator;
import com.google.inject.Inject;
import iotdsl.IoTDSLPackage;
import iotdsl.IoTModel;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.junit4.util.ParseHelper;
import org.eclipse.xtext.junit4.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(IoTDSLInjectorProvider.class)
@SuppressWarnings("all")
public class IoTDSLDuplicateValidationTest {
  @Inject
  @Extension
  private ParseHelper<IoTModel> _parseHelper;
  
  @Inject
  @Extension
  private ValidationTestHelper _validationTestHelper;
  
  @Test
  public void DuplicateDeviceName() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("device dev {}");
      _builder.newLine();
      _builder.append("device dev {}");
      _builder.newLine();
      IoTModel _parse = this._parseHelper.parse(_builder);
      EClass _device = IoTDSLPackage.eINSTANCE.getDevice();
      this._validationTestHelper.assertError(_parse, _device, 
        IoTDSLDuplicateValidator.DUPLICATE_NAME, 
        "Duplicate device \'dev\'");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void NoDuplicateDeviceName() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("device dev {}");
      _builder.newLine();
      _builder.append("device d   {}");
      _builder.newLine();
      IoTModel _parse = this._parseHelper.parse(_builder);
      this._validationTestHelper.assertNoErrors(_parse);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
