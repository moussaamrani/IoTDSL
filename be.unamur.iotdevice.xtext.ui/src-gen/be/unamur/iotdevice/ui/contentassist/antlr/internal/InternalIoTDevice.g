/*
 * generated by Xtext
 */
grammar InternalIoTDevice;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package be.unamur.iotdevice.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package be.unamur.iotdevice.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import be.unamur.iotdevice.services.IoTDeviceGrammarAccess;

}

@parser::members {
 
 	private IoTDeviceGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(IoTDeviceGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleIoTModel
entryRuleIoTModel 
:
{ before(grammarAccess.getIoTModelRule()); }
	 ruleIoTModel
{ after(grammarAccess.getIoTModelRule()); } 
	 EOF 
;

// Rule IoTModel
ruleIoTModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIoTModelAccess().getGroup()); }
(rule__IoTModel__Group__0)
{ after(grammarAccess.getIoTModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaredType
entryRuleDeclaredType 
:
{ before(grammarAccess.getDeclaredTypeRule()); }
	 ruleDeclaredType
{ after(grammarAccess.getDeclaredTypeRule()); } 
	 EOF 
;

// Rule DeclaredType
ruleDeclaredType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclaredTypeAccess().getAlternatives()); }
(rule__DeclaredType__Alternatives)
{ after(grammarAccess.getDeclaredTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumeration
entryRuleEnumeration 
:
{ before(grammarAccess.getEnumerationRule()); }
	 ruleEnumeration
{ after(grammarAccess.getEnumerationRule()); } 
	 EOF 
;

// Rule Enumeration
ruleEnumeration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationAccess().getGroup()); }
(rule__Enumeration__Group__0)
{ after(grammarAccess.getEnumerationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationLiteral
entryRuleEnumerationLiteral 
:
{ before(grammarAccess.getEnumerationLiteralRule()); }
	 ruleEnumerationLiteral
{ after(grammarAccess.getEnumerationLiteralRule()); } 
	 EOF 
;

// Rule EnumerationLiteral
ruleEnumerationLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationLiteralAccess().getGroup()); }
(rule__EnumerationLiteral__Group__0)
{ after(grammarAccess.getEnumerationLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNode
entryRuleNode 
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeAccess().getAlternatives()); }
(rule__Node__Alternatives)
{ after(grammarAccess.getNodeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCloud
entryRuleCloud 
:
{ before(grammarAccess.getCloudRule()); }
	 ruleCloud
{ after(grammarAccess.getCloudRule()); } 
	 EOF 
;

// Rule Cloud
ruleCloud
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCloudAccess().getGroup()); }
(rule__Cloud__Group__0)
{ after(grammarAccess.getCloudAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGateway
entryRuleGateway 
:
{ before(grammarAccess.getGatewayRule()); }
	 ruleGateway
{ after(grammarAccess.getGatewayRule()); } 
	 EOF 
;

// Rule Gateway
ruleGateway
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGatewayAccess().getGroup()); }
(rule__Gateway__Group__0)
{ after(grammarAccess.getGatewayAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRouter
entryRuleRouter 
:
{ before(grammarAccess.getRouterRule()); }
	 ruleRouter
{ after(grammarAccess.getRouterRule()); } 
	 EOF 
;

// Rule Router
ruleRouter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRouterAccess().getGroup()); }
(rule__Router__Group__0)
{ after(grammarAccess.getRouterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDevice
entryRuleDevice 
:
{ before(grammarAccess.getDeviceRule()); }
	 ruleDevice
{ after(grammarAccess.getDeviceRule()); } 
	 EOF 
;

// Rule Device
ruleDevice
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeviceAccess().getGroup()); }
(rule__Device__Group__0)
{ after(grammarAccess.getDeviceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFeature
entryRuleFeature 
:
{ before(grammarAccess.getFeatureRule()); }
	 ruleFeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule Feature
ruleFeature
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeatureAccess().getAlternatives()); }
(rule__Feature__Alternatives)
{ after(grammarAccess.getFeatureAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProperty
entryRuleProperty 
:
{ before(grammarAccess.getPropertyRule()); }
	 ruleProperty
{ after(grammarAccess.getPropertyRule()); } 
	 EOF 
;

// Rule Property
ruleProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyAccess().getGroup()); }
(rule__Property__Group__0)
{ after(grammarAccess.getPropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCapability
entryRuleCapability 
:
{ before(grammarAccess.getCapabilityRule()); }
	 ruleCapability
{ after(grammarAccess.getCapabilityRule()); } 
	 EOF 
;

// Rule Capability
ruleCapability
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCapabilityAccess().getAlternatives()); }
(rule__Capability__Alternatives)
{ after(grammarAccess.getCapabilityAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSensing
entryRuleSensing 
:
{ before(grammarAccess.getSensingRule()); }
	 ruleSensing
{ after(grammarAccess.getSensingRule()); } 
	 EOF 
;

// Rule Sensing
ruleSensing
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSensingAccess().getGroup()); }
(rule__Sensing__Group__0)
{ after(grammarAccess.getSensingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActuating
entryRuleActuating 
:
{ before(grammarAccess.getActuatingRule()); }
	 ruleActuating
{ after(grammarAccess.getActuatingRule()); } 
	 EOF 
;

// Rule Actuating
ruleActuating
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActuatingAccess().getGroup()); }
(rule__Actuating__Group__0)
{ after(grammarAccess.getActuatingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeReference
entryRuleTypeReference 
:
{ before(grammarAccess.getTypeReferenceRule()); }
	 ruleTypeReference
{ after(grammarAccess.getTypeReferenceRule()); } 
	 EOF 
;

// Rule TypeReference
ruleTypeReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeReferenceAccess().getAlternatives()); }
(rule__TypeReference__Alternatives)
{ after(grammarAccess.getTypeReferenceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimitiveType
entryRulePrimitiveType 
:
{ before(grammarAccess.getPrimitiveTypeRule()); }
	 rulePrimitiveType
{ after(grammarAccess.getPrimitiveTypeRule()); } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
(rule__PrimitiveType__Alternatives)
{ after(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerType
entryRuleIntegerType 
:
{ before(grammarAccess.getIntegerTypeRule()); }
	 ruleIntegerType
{ after(grammarAccess.getIntegerTypeRule()); } 
	 EOF 
;

// Rule IntegerType
ruleIntegerType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerTypeAccess().getGroup()); }
(rule__IntegerType__Group__0)
{ after(grammarAccess.getIntegerTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanType
entryRuleBooleanType 
:
{ before(grammarAccess.getBooleanTypeRule()); }
	 ruleBooleanType
{ after(grammarAccess.getBooleanTypeRule()); } 
	 EOF 
;

// Rule BooleanType
ruleBooleanType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanTypeAccess().getGroup()); }
(rule__BooleanType__Group__0)
{ after(grammarAccess.getBooleanTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringType
entryRuleStringType 
:
{ before(grammarAccess.getStringTypeRule()); }
	 ruleStringType
{ after(grammarAccess.getStringTypeRule()); } 
	 EOF 
;

// Rule StringType
ruleStringType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringTypeAccess().getGroup()); }
(rule__StringType__Group__0)
{ after(grammarAccess.getStringTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRealType
entryRuleRealType 
:
{ before(grammarAccess.getRealTypeRule()); }
	 ruleRealType
{ after(grammarAccess.getRealTypeRule()); } 
	 EOF 
;

// Rule RealType
ruleRealType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRealTypeAccess().getGroup()); }
(rule__RealType__Group__0)
{ after(grammarAccess.getRealTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNetworkConfiguration
entryRuleNetworkConfiguration 
:
{ before(grammarAccess.getNetworkConfigurationRule()); }
	 ruleNetworkConfiguration
{ after(grammarAccess.getNetworkConfigurationRule()); } 
	 EOF 
;

// Rule NetworkConfiguration
ruleNetworkConfiguration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNetworkConfigurationAccess().getGroup()); }
(rule__NetworkConfiguration__Group__0)
{ after(grammarAccess.getNetworkConfigurationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeInstance
entryRuleNodeInstance 
:
{ before(grammarAccess.getNodeInstanceRule()); }
	 ruleNodeInstance
{ after(grammarAccess.getNodeInstanceRule()); } 
	 EOF 
;

// Rule NodeInstance
ruleNodeInstance
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeInstanceAccess().getGroup()); }
(rule__NodeInstance__Group__0)
{ after(grammarAccess.getNodeInstanceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCommunicationPath
entryRuleCommunicationPath 
:
{ before(grammarAccess.getCommunicationPathRule()); }
	 ruleCommunicationPath
{ after(grammarAccess.getCommunicationPathRule()); } 
	 EOF 
;

// Rule CommunicationPath
ruleCommunicationPath
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCommunicationPathAccess().getGroup()); }
(rule__CommunicationPath__Group__0)
{ after(grammarAccess.getCommunicationPathAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
(rule__VariableDeclaration__Group__0)
{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRule
entryRuleRule 
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleAccess().getGroup()); }
(rule__Rule__Group__0)
{ after(grammarAccess.getRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReaction
entryRuleReaction 
:
{ before(grammarAccess.getReactionRule()); }
	 ruleReaction
{ after(grammarAccess.getReactionRule()); } 
	 EOF 
;

// Rule Reaction
ruleReaction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReactionAccess().getParallelCompositionParserRuleCall()); }
	ruleParallelComposition
{ after(grammarAccess.getReactionAccess().getParallelCompositionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParallelComposition
entryRuleParallelComposition 
:
{ before(grammarAccess.getParallelCompositionRule()); }
	 ruleParallelComposition
{ after(grammarAccess.getParallelCompositionRule()); } 
	 EOF 
;

// Rule ParallelComposition
ruleParallelComposition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParallelCompositionAccess().getGroup()); }
(rule__ParallelComposition__Group__0)
{ after(grammarAccess.getParallelCompositionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSeqComposition
entryRuleSeqComposition 
:
{ before(grammarAccess.getSeqCompositionRule()); }
	 ruleSeqComposition
{ after(grammarAccess.getSeqCompositionRule()); } 
	 EOF 
;

// Rule SeqComposition
ruleSeqComposition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSeqCompositionAccess().getGroup()); }
(rule__SeqComposition__Group__0)
{ after(grammarAccess.getSeqCompositionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleReaction
entryRuleSimpleReaction 
:
{ before(grammarAccess.getSimpleReactionRule()); }
	 ruleSimpleReaction
{ after(grammarAccess.getSimpleReactionRule()); } 
	 EOF 
;

// Rule SimpleReaction
ruleSimpleReaction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleReactionAccess().getExpAssignment()); }
(rule__SimpleReaction__ExpAssignment)
{ after(grammarAccess.getSimpleReactionAccess().getExpAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); }
	ruleOrExpression
{ after(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression 
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
(rule__EqualityExpression__Group__0)
{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
(rule__UnaryExpression__Alternatives)
{ after(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCapabilitySelection
entryRuleCapabilitySelection 
:
{ before(grammarAccess.getCapabilitySelectionRule()); }
	 ruleCapabilitySelection
{ after(grammarAccess.getCapabilitySelectionRule()); } 
	 EOF 
;

// Rule CapabilitySelection
ruleCapabilitySelection
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCapabilitySelectionAccess().getGroup()); }
(rule__CapabilitySelection__Group__0)
{ after(grammarAccess.getCapabilitySelectionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression 
:
{ before(grammarAccess.getParenthesizedExpressionRule()); }
	 ruleParenthesizedExpression
{ after(grammarAccess.getParenthesizedExpressionRule()); } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
(rule__ParenthesizedExpression__Group__0)
{ after(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTarget
entryRuleTarget 
:
{ before(grammarAccess.getTargetRule()); }
	 ruleTarget
{ after(grammarAccess.getTargetRule()); } 
	 EOF 
;

// Rule Target
ruleTarget
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTargetAccess().getRefAssignment()); }
(rule__Target__RefAssignment)
{ after(grammarAccess.getTargetAccess().getRefAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression 
:
{ before(grammarAccess.getLiteralExpressionRule()); }
	 ruleLiteralExpression
{ after(grammarAccess.getLiteralExpressionRule()); } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
(rule__LiteralExpression__Alternatives)
{ after(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValidID
entryRuleValidID 
:
{ before(grammarAccess.getValidIDRule()); }
	 ruleValidID
{ after(grammarAccess.getValidIDRule()); } 
	 EOF 
;

// Rule ValidID
ruleValidID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Protocol
ruleProtocol
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProtocolAccess().getAlternatives()); }
(rule__Protocol__Alternatives)
{ after(grammarAccess.getProtocolAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getDeclaredTypeParserRuleCall_0()); }
	ruleDeclaredType
{ after(grammarAccess.getTypeAccess().getDeclaredTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_1()); }
	rulePrimitiveType
{ after(grammarAccess.getTypeAccess().getPrimitiveTypeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaredTypeAccess().getNodeParserRuleCall_0()); }
	ruleNode
{ after(grammarAccess.getDeclaredTypeAccess().getNodeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDeclaredTypeAccess().getEnumerationParserRuleCall_1()); }
	ruleEnumeration
{ after(grammarAccess.getDeclaredTypeAccess().getEnumerationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getCloudParserRuleCall_0()); }
	ruleCloud
{ after(grammarAccess.getNodeAccess().getCloudParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getGatewayParserRuleCall_1()); }
	ruleGateway
{ after(grammarAccess.getNodeAccess().getGatewayParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getRouterParserRuleCall_2()); }
	ruleRouter
{ after(grammarAccess.getNodeAccess().getRouterParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getDeviceParserRuleCall_3()); }
	ruleDevice
{ after(grammarAccess.getNodeAccess().getDeviceParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureAccess().getPropertyParserRuleCall_0()); }
	ruleProperty
{ after(grammarAccess.getFeatureAccess().getPropertyParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFeatureAccess().getCapabilityParserRuleCall_1()); }
	ruleCapability
{ after(grammarAccess.getFeatureAccess().getCapabilityParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Capability__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCapabilityAccess().getSensingParserRuleCall_0()); }
	ruleSensing
{ after(grammarAccess.getCapabilityAccess().getSensingParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCapabilityAccess().getActuatingParserRuleCall_1()); }
	ruleActuating
{ after(grammarAccess.getCapabilityAccess().getActuatingParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeReferenceAccess().getPtypeAssignment_0()); }
(rule__TypeReference__PtypeAssignment_0)
{ after(grammarAccess.getTypeReferenceAccess().getPtypeAssignment_0()); }
)

    |(
{ before(grammarAccess.getTypeReferenceAccess().getDtypeAssignment_1()); }
(rule__TypeReference__DtypeAssignment_1)
{ after(grammarAccess.getTypeReferenceAccess().getDtypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimitiveTypeAccess().getIntegerTypeParserRuleCall_0()); }
	ruleIntegerType
{ after(grammarAccess.getPrimitiveTypeAccess().getIntegerTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getBooleanTypeParserRuleCall_1()); }
	ruleBooleanType
{ after(grammarAccess.getPrimitiveTypeAccess().getBooleanTypeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getStringTypeParserRuleCall_2()); }
	ruleStringType
{ after(grammarAccess.getPrimitiveTypeAccess().getStringTypeParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimitiveTypeAccess().getRealTypeParserRuleCall_3()); }
	ruleRealType
{ after(grammarAccess.getPrimitiveTypeAccess().getRealTypeParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0()); }

	'==' 

{ after(grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1()); }

	'!=' 

{ after(grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpLessThanSignKeyword_1_1_0_0()); }

	'<' 

{ after(grammarAccess.getRelationalExpressionAccess().getOpLessThanSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getOpGreaterThanSignKeyword_1_1_0_1()); }

	'>' 

{ after(grammarAccess.getRelationalExpressionAccess().getOpGreaterThanSignKeyword_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_2()); }

	'<=' 

{ after(grammarAccess.getRelationalExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_2()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_3()); }

	'>=' 

{ after(grammarAccess.getRelationalExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpPlusSignKeyword_1_1_0_0()); }

	'+' 

{ after(grammarAccess.getAdditiveExpressionAccess().getOpPlusSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpHyphenMinusKeyword_1_1_0_1()); }

	'-' 

{ after(grammarAccess.getAdditiveExpressionAccess().getOpHyphenMinusKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_1_0_0()); }

	'*' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_1_1_0_1()); }

	'/' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
(rule__UnaryExpression__Group_0__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_1()); }
(rule__UnaryExpression__Group_1__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup_2()); }
(rule__UnaryExpression__Group_2__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionAccess().getCapabilitySelectionParserRuleCall_3()); }
	ruleCapabilitySelection
{ after(grammarAccess.getUnaryExpressionAccess().getCapabilitySelectionParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_0()); }
	ruleParenthesizedExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralExpressionParserRuleCall_1()); }
	ruleLiteralExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getTargetParserRuleCall_2()); }
	ruleTarget
{ after(grammarAccess.getPrimaryExpressionAccess().getTargetParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getGroup_0()); }
(rule__LiteralExpression__Group_0__0)
{ after(grammarAccess.getLiteralExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getGroup_1()); }
(rule__LiteralExpression__Group_1__0)
{ after(grammarAccess.getLiteralExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getGroup_2()); }
(rule__LiteralExpression__Group_2__0)
{ after(grammarAccess.getLiteralExpressionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getGroup_3()); }
(rule__LiteralExpression__Group_3__0)
{ after(grammarAccess.getLiteralExpressionAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getGroup_4()); }
(rule__LiteralExpression__Group_4__0)
{ after(grammarAccess.getLiteralExpressionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Alternatives_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getFalseKeyword_4_1_0()); }

	'false' 

{ after(grammarAccess.getLiteralExpressionAccess().getFalseKeyword_4_1_0()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionAccess().getIsTrueAssignment_4_1_1()); }
(rule__LiteralExpression__IsTrueAssignment_4_1_1)
{ after(grammarAccess.getLiteralExpressionAccess().getIsTrueAssignment_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Protocol__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProtocolAccess().getIPEnumLiteralDeclaration_0()); }
(	'IP' 
)
{ after(grammarAccess.getProtocolAccess().getIPEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getProtocolAccess().getZWAVEEnumLiteralDeclaration_1()); }
(	'ZWAVE' 
)
{ after(grammarAccess.getProtocolAccess().getZWAVEEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getProtocolAccess().getZIGBEEEnumLiteralDeclaration_2()); }
(	'ZIGBEE' 
)
{ after(grammarAccess.getProtocolAccess().getZIGBEEEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getProtocolAccess().getMQTTEnumLiteralDeclaration_3()); }
(	'MQTT' 
)
{ after(grammarAccess.getProtocolAccess().getMQTTEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getProtocolAccess().getDDSEnumLiteralDeclaration_4()); }
(	'DDS' 
)
{ after(grammarAccess.getProtocolAccess().getDDSEnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__IoTModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IoTModel__Group__0__Impl
	rule__IoTModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IoTModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIoTModelAccess().getIoTModelAction_0()); }
(

)
{ after(grammarAccess.getIoTModelAccess().getIoTModelAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IoTModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IoTModel__Group__1__Impl
	rule__IoTModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IoTModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIoTModelAccess().getTypesAssignment_1()); }
(rule__IoTModel__TypesAssignment_1)*
{ after(grammarAccess.getIoTModelAccess().getTypesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IoTModel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IoTModel__Group__2__Impl
	rule__IoTModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IoTModel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIoTModelAccess().getConfigurationAssignment_2()); }
(rule__IoTModel__ConfigurationAssignment_2)*
{ after(grammarAccess.getIoTModelAccess().getConfigurationAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IoTModel__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IoTModel__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IoTModel__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIoTModelAccess().getRulesAssignment_3()); }
(rule__IoTModel__RulesAssignment_3)*
{ after(grammarAccess.getIoTModelAccess().getRulesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Enumeration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__0__Impl
	rule__Enumeration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getEnumerationKeyword_0()); }

	'enumeration' 

{ after(grammarAccess.getEnumerationAccess().getEnumerationKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__1__Impl
	rule__Enumeration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getNameAssignment_1()); }
(rule__Enumeration__NameAssignment_1)
{ after(grammarAccess.getEnumerationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__2__Impl
	rule__Enumeration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getEnumerationAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__3__Impl
	rule__Enumeration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getGroup_3()); }
(rule__Enumeration__Group_3__0)*
{ after(grammarAccess.getEnumerationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getEnumerationAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Enumeration__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group_3__0__Impl
	rule__Enumeration__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getLiteralsAssignment_3_0()); }
(rule__Enumeration__LiteralsAssignment_3_0)
{ after(grammarAccess.getEnumerationAccess().getLiteralsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Enumeration__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Enumeration__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getSemicolonKeyword_3_1()); }

	';' 

{ after(grammarAccess.getEnumerationAccess().getSemicolonKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumerationLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationLiteral__Group__0__Impl
	rule__EnumerationLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationLiteralAccess().getEnumerationLiteralAction_0()); }
(

)
{ after(grammarAccess.getEnumerationLiteralAccess().getEnumerationLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationLiteralAccess().getNameAssignment_1()); }
(rule__EnumerationLiteral__NameAssignment_1)
{ after(grammarAccess.getEnumerationLiteralAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Cloud__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cloud__Group__0__Impl
	rule__Cloud__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cloud__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCloudAccess().getCloudAction_0()); }
(

)
{ after(grammarAccess.getCloudAccess().getCloudAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cloud__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cloud__Group__1__Impl
	rule__Cloud__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Cloud__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCloudAccess().getCloudKeyword_1()); }

	'cloud' 

{ after(grammarAccess.getCloudAccess().getCloudKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Cloud__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Cloud__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cloud__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCloudAccess().getNameAssignment_2()); }
(rule__Cloud__NameAssignment_2)
{ after(grammarAccess.getCloudAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Gateway__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Gateway__Group__0__Impl
	rule__Gateway__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Gateway__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGatewayAccess().getGatewayAction_0()); }
(

)
{ after(grammarAccess.getGatewayAccess().getGatewayAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Gateway__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Gateway__Group__1__Impl
	rule__Gateway__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Gateway__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGatewayAccess().getGatewayKeyword_1()); }

	'gateway' 

{ after(grammarAccess.getGatewayAccess().getGatewayKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Gateway__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Gateway__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Gateway__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGatewayAccess().getNameAssignment_2()); }
(rule__Gateway__NameAssignment_2)
{ after(grammarAccess.getGatewayAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Router__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Router__Group__0__Impl
	rule__Router__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Router__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRouterAccess().getRouterAction_0()); }
(

)
{ after(grammarAccess.getRouterAccess().getRouterAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Router__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Router__Group__1__Impl
	rule__Router__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Router__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRouterAccess().getRouterKeyword_1()); }

	'router' 

{ after(grammarAccess.getRouterAccess().getRouterKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Router__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Router__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Router__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRouterAccess().getNameAssignment_2()); }
(rule__Router__NameAssignment_2)
{ after(grammarAccess.getRouterAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Device__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Device__Group__0__Impl
	rule__Device__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeviceAccess().getDeviceAction_0()); }
(

)
{ after(grammarAccess.getDeviceAccess().getDeviceAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Device__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Device__Group__1__Impl
	rule__Device__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeviceAccess().getDeviceKeyword_1()); }

	'device' 

{ after(grammarAccess.getDeviceAccess().getDeviceKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Device__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Device__Group__2__Impl
	rule__Device__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeviceAccess().getNameAssignment_2()); }
(rule__Device__NameAssignment_2)
{ after(grammarAccess.getDeviceAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Device__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Device__Group__3__Impl
	rule__Device__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeviceAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getDeviceAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Device__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Device__Group__4__Impl
	rule__Device__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeviceAccess().getFeaturesAssignment_4()); }
(rule__Device__FeaturesAssignment_4)*
{ after(grammarAccess.getDeviceAccess().getFeaturesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Device__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Device__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Device__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeviceAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getDeviceAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Property__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__0__Impl
	rule__Property__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getPropertyKeyword_0()); }

	'property' 

{ after(grammarAccess.getPropertyAccess().getPropertyKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__1__Impl
	rule__Property__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getNameAssignment_1()); }
(rule__Property__NameAssignment_1)
{ after(grammarAccess.getPropertyAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__2__Impl
	rule__Property__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getPropertyAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getTypeAssignment_3()); }
(rule__Property__TypeAssignment_3)
{ after(grammarAccess.getPropertyAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Sensing__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensing__Group__0__Impl
	rule__Sensing__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensing__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensingAccess().getSensingAction_0()); }
(

)
{ after(grammarAccess.getSensingAccess().getSensingAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sensing__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensing__Group__1__Impl
	rule__Sensing__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensing__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensingAccess().getSensingKeyword_1()); }

	'sensing' 

{ after(grammarAccess.getSensingAccess().getSensingKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sensing__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensing__Group__2__Impl
	rule__Sensing__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensing__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensingAccess().getNameAssignment_2()); }
(rule__Sensing__NameAssignment_2)
{ after(grammarAccess.getSensingAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sensing__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensing__Group__3__Impl
	rule__Sensing__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensing__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensingAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getSensingAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sensing__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensing__Group__4__Impl
	rule__Sensing__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensing__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensingAccess().getGroup_4()); }
(rule__Sensing__Group_4__0)?
{ after(grammarAccess.getSensingAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sensing__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensing__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensing__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensingAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getSensingAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Sensing__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensing__Group_4__0__Impl
	rule__Sensing__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensing__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensingAccess().getParametersAssignment_4_0()); }
(rule__Sensing__ParametersAssignment_4_0)
{ after(grammarAccess.getSensingAccess().getParametersAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sensing__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensing__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensing__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensingAccess().getGroup_4_1()); }
(rule__Sensing__Group_4_1__0)*
{ after(grammarAccess.getSensingAccess().getGroup_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Sensing__Group_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensing__Group_4_1__0__Impl
	rule__Sensing__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensing__Group_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensingAccess().getCommaKeyword_4_1_0()); }

	',' 

{ after(grammarAccess.getSensingAccess().getCommaKeyword_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sensing__Group_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sensing__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensing__Group_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensingAccess().getParametersAssignment_4_1_1()); }
(rule__Sensing__ParametersAssignment_4_1_1)
{ after(grammarAccess.getSensingAccess().getParametersAssignment_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Actuating__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actuating__Group__0__Impl
	rule__Actuating__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuating__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActuatingAccess().getActuatingAction_0()); }
(

)
{ after(grammarAccess.getActuatingAccess().getActuatingAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Actuating__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actuating__Group__1__Impl
	rule__Actuating__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuating__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActuatingAccess().getActuatingKeyword_1()); }

	'actuating' 

{ after(grammarAccess.getActuatingAccess().getActuatingKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Actuating__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actuating__Group__2__Impl
	rule__Actuating__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuating__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActuatingAccess().getNameAssignment_2()); }
(rule__Actuating__NameAssignment_2)
{ after(grammarAccess.getActuatingAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Actuating__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actuating__Group__3__Impl
	rule__Actuating__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuating__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActuatingAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getActuatingAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Actuating__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actuating__Group__4__Impl
	rule__Actuating__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuating__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActuatingAccess().getGroup_4()); }
(rule__Actuating__Group_4__0)?
{ after(grammarAccess.getActuatingAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Actuating__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actuating__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuating__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActuatingAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getActuatingAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Actuating__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actuating__Group_4__0__Impl
	rule__Actuating__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuating__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActuatingAccess().getParametersAssignment_4_0()); }
(rule__Actuating__ParametersAssignment_4_0)
{ after(grammarAccess.getActuatingAccess().getParametersAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Actuating__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actuating__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuating__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActuatingAccess().getGroup_4_1()); }
(rule__Actuating__Group_4_1__0)*
{ after(grammarAccess.getActuatingAccess().getGroup_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Actuating__Group_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actuating__Group_4_1__0__Impl
	rule__Actuating__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuating__Group_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActuatingAccess().getCommaKeyword_4_1_0()); }

	',' 

{ after(grammarAccess.getActuatingAccess().getCommaKeyword_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Actuating__Group_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Actuating__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuating__Group_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActuatingAccess().getParametersAssignment_4_1_1()); }
(rule__Actuating__ParametersAssignment_4_1_1)
{ after(grammarAccess.getActuatingAccess().getParametersAssignment_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_0()); }
(rule__Parameter__NameAssignment_0)
{ after(grammarAccess.getParameterAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getParameterAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeAssignment_2()); }
(rule__Parameter__TypeAssignment_2)
{ after(grammarAccess.getParameterAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IntegerType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerType__Group__0__Impl
	rule__IntegerType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeAccess().getIntegerTypeAction_0()); }
(

)
{ after(grammarAccess.getIntegerTypeAccess().getIntegerTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeAccess().getNameAssignment_1()); }
(rule__IntegerType__NameAssignment_1)
{ after(grammarAccess.getIntegerTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanType__Group__0__Impl
	rule__BooleanType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0()); }
(

)
{ after(grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTypeAccess().getNameAssignment_1()); }
(rule__BooleanType__NameAssignment_1)
{ after(grammarAccess.getBooleanTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringType__Group__0__Impl
	rule__StringType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeAccess().getStringTypeAction_0()); }
(

)
{ after(grammarAccess.getStringTypeAccess().getStringTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeAccess().getNameAssignment_1()); }
(rule__StringType__NameAssignment_1)
{ after(grammarAccess.getStringTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RealType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealType__Group__0__Impl
	rule__RealType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeAccess().getRealTypeAction_0()); }
(

)
{ after(grammarAccess.getRealTypeAccess().getRealTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RealType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RealType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeAccess().getNameAssignment_1()); }
(rule__RealType__NameAssignment_1)
{ after(grammarAccess.getRealTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NetworkConfiguration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NetworkConfiguration__Group__0__Impl
	rule__NetworkConfiguration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NetworkConfiguration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNetworkConfigurationAccess().getNetworkConfigurationAction_0()); }
(

)
{ after(grammarAccess.getNetworkConfigurationAccess().getNetworkConfigurationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NetworkConfiguration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NetworkConfiguration__Group__1__Impl
	rule__NetworkConfiguration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NetworkConfiguration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNetworkConfigurationAccess().getConfigurationKeyword_1()); }

	'configuration' 

{ after(grammarAccess.getNetworkConfigurationAccess().getConfigurationKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NetworkConfiguration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NetworkConfiguration__Group__2__Impl
	rule__NetworkConfiguration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NetworkConfiguration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNetworkConfigurationAccess().getNameAssignment_2()); }
(rule__NetworkConfiguration__NameAssignment_2)
{ after(grammarAccess.getNetworkConfigurationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NetworkConfiguration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NetworkConfiguration__Group__3__Impl
	rule__NetworkConfiguration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NetworkConfiguration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNetworkConfigurationAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getNetworkConfigurationAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NetworkConfiguration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NetworkConfiguration__Group__4__Impl
	rule__NetworkConfiguration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NetworkConfiguration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNetworkConfigurationAccess().getNodesAssignment_4()); }
(rule__NetworkConfiguration__NodesAssignment_4)*
{ after(grammarAccess.getNetworkConfigurationAccess().getNodesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NetworkConfiguration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NetworkConfiguration__Group__5__Impl
	rule__NetworkConfiguration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__NetworkConfiguration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNetworkConfigurationAccess().getPathsAssignment_5()); }
(rule__NetworkConfiguration__PathsAssignment_5)*
{ after(grammarAccess.getNetworkConfigurationAccess().getPathsAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NetworkConfiguration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NetworkConfiguration__Group__6__Impl
	rule__NetworkConfiguration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__NetworkConfiguration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNetworkConfigurationAccess().getVariablesAssignment_6()); }
(rule__NetworkConfiguration__VariablesAssignment_6)*
{ after(grammarAccess.getNetworkConfigurationAccess().getVariablesAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NetworkConfiguration__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NetworkConfiguration__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NetworkConfiguration__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNetworkConfigurationAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getNetworkConfigurationAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__NodeInstance__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeInstance__Group__0__Impl
	rule__NodeInstance__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstance__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceAccess().getNodeKeyword_0()); }

	'node' 

{ after(grammarAccess.getNodeInstanceAccess().getNodeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeInstance__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeInstance__Group__1__Impl
	rule__NodeInstance__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstance__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceAccess().getNameAssignment_1()); }
(rule__NodeInstance__NameAssignment_1)
{ after(grammarAccess.getNodeInstanceAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeInstance__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeInstance__Group__2__Impl
	rule__NodeInstance__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstance__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getNodeInstanceAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeInstance__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeInstance__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstance__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceAccess().getTypeAssignment_3()); }
(rule__NodeInstance__TypeAssignment_3)
{ after(grammarAccess.getNodeInstanceAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CommunicationPath__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CommunicationPath__Group__0__Impl
	rule__CommunicationPath__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CommunicationPath__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommunicationPathAccess().getFromKeyword_0()); }

	'from' 

{ after(grammarAccess.getCommunicationPathAccess().getFromKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CommunicationPath__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CommunicationPath__Group__1__Impl
	rule__CommunicationPath__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CommunicationPath__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommunicationPathAccess().getSrcAssignment_1()); }
(rule__CommunicationPath__SrcAssignment_1)
{ after(grammarAccess.getCommunicationPathAccess().getSrcAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CommunicationPath__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CommunicationPath__Group__2__Impl
	rule__CommunicationPath__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CommunicationPath__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommunicationPathAccess().getToKeyword_2()); }

	'to' 

{ after(grammarAccess.getCommunicationPathAccess().getToKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CommunicationPath__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CommunicationPath__Group__3__Impl
	rule__CommunicationPath__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CommunicationPath__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommunicationPathAccess().getTgtAssignment_3()); }
(rule__CommunicationPath__TgtAssignment_3)
{ after(grammarAccess.getCommunicationPathAccess().getTgtAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CommunicationPath__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CommunicationPath__Group__4__Impl
	rule__CommunicationPath__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CommunicationPath__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommunicationPathAccess().getViaKeyword_4()); }

	'via' 

{ after(grammarAccess.getCommunicationPathAccess().getViaKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CommunicationPath__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CommunicationPath__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CommunicationPath__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommunicationPathAccess().getProtocolAssignment_5()); }
(rule__CommunicationPath__ProtocolAssignment_5)
{ after(grammarAccess.getCommunicationPathAccess().getProtocolAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__VariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0()); }

	'var' 

{ after(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
(rule__VariableDeclaration__NameAssignment_1)
{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getInitAssignment_3()); }
(rule__VariableDeclaration__InitAssignment_3)
{ after(grammarAccess.getVariableDeclarationAccess().getInitAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Rule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getRuleKeyword_0()); }

	'rule' 

{ after(grammarAccess.getRuleAccess().getRuleKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getNameAssignment_1()); }
(rule__Rule__NameAssignment_1)
{ after(grammarAccess.getRuleAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getRuleAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getWhenKeyword_3()); }

	'when' 

{ after(grammarAccess.getRuleAccess().getWhenKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__4__Impl
	rule__Rule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getLeftParenthesisKeyword_4()); }

	'(' 

{ after(grammarAccess.getRuleAccess().getLeftParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__5__Impl
	rule__Rule__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getTriggerAssignment_5()); }
(rule__Rule__TriggerAssignment_5)
{ after(grammarAccess.getRuleAccess().getTriggerAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__6__Impl
	rule__Rule__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getRuleAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__7__Impl
	rule__Rule__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getDoKeyword_7()); }

	'do' 

{ after(grammarAccess.getRuleAccess().getDoKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__8__Impl
	rule__Rule__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_8()); }

	'{' 

{ after(grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__9__Impl
	rule__Rule__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getReactionAssignment_9()); }
(rule__Rule__ReactionAssignment_9)
{ after(grammarAccess.getRuleAccess().getReactionAssignment_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__10
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__10__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_10()); }

	'}' 

{ after(grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}
























rule__ParallelComposition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelComposition__Group__0__Impl
	rule__ParallelComposition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelComposition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelCompositionAccess().getSeqCompositionParserRuleCall_0()); }
	ruleSeqComposition
{ after(grammarAccess.getParallelCompositionAccess().getSeqCompositionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelComposition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelComposition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelComposition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelCompositionAccess().getGroup_1()); }
(rule__ParallelComposition__Group_1__0)*
{ after(grammarAccess.getParallelCompositionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParallelComposition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelComposition__Group_1__0__Impl
	rule__ParallelComposition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelComposition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelCompositionAccess().getParallelCompositionLhsAction_1_0()); }
(

)
{ after(grammarAccess.getParallelCompositionAccess().getParallelCompositionLhsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelComposition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelComposition__Group_1__1__Impl
	rule__ParallelComposition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelComposition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelCompositionAccess().getVerticalLineVerticalLineKeyword_1_1()); }

	'||' 

{ after(grammarAccess.getParallelCompositionAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelComposition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelComposition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelComposition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelCompositionAccess().getRhsAssignment_1_2()); }
(rule__ParallelComposition__RhsAssignment_1_2)
{ after(grammarAccess.getParallelCompositionAccess().getRhsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SeqComposition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeqComposition__Group__0__Impl
	rule__SeqComposition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SeqComposition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqCompositionAccess().getSimpleReactionParserRuleCall_0()); }
	ruleSimpleReaction
{ after(grammarAccess.getSeqCompositionAccess().getSimpleReactionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SeqComposition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeqComposition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SeqComposition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqCompositionAccess().getGroup_1()); }
(rule__SeqComposition__Group_1__0)*
{ after(grammarAccess.getSeqCompositionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SeqComposition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeqComposition__Group_1__0__Impl
	rule__SeqComposition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SeqComposition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqCompositionAccess().getSeqCompositionLhsAction_1_0()); }
(

)
{ after(grammarAccess.getSeqCompositionAccess().getSeqCompositionLhsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SeqComposition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeqComposition__Group_1__1__Impl
	rule__SeqComposition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SeqComposition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqCompositionAccess().getSemicolonKeyword_1_1()); }

	';' 

{ after(grammarAccess.getSeqCompositionAccess().getSemicolonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SeqComposition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeqComposition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SeqComposition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqCompositionAccess().getRhsAssignment_1_2()); }
(rule__SeqComposition__RhsAssignment_1_2)
{ after(grammarAccess.getSeqCompositionAccess().getRhsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOrExpressionLhsAction_1_0()); }
(

)
{ after(grammarAccess.getOrExpressionAccess().getOrExpressionLhsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOpAssignment_1_1()); }
(rule__OrExpression__OpAssignment_1_1)
{ after(grammarAccess.getOrExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRhsAssignment_1_2()); }
(rule__OrExpression__RhsAssignment_1_2)
{ after(grammarAccess.getOrExpressionAccess().getRhsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
	ruleEqualityExpression
{ after(grammarAccess.getAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLhsAction_1_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLhsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOpAssignment_1_1()); }
(rule__AndExpression__OpAssignment_1_1)
{ after(grammarAccess.getAndExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRhsAssignment_1_2()); }
(rule__AndExpression__RhsAssignment_1_2)
{ after(grammarAccess.getAndExpressionAccess().getRhsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EqualityExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
	ruleRelationalExpression
{ after(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
(rule__EqualityExpression__Group_1__0)*
{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualityExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__0__Impl
	rule__EqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0()); }
(

)
{ after(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__1__Impl
	rule__EqualityExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpAssignment_1_1()); }
(rule__EqualityExpression__OpAssignment_1_1)
{ after(grammarAccess.getEqualityExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualityExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_2()); }
(rule__EqualityExpression__RhsAssignment_1_2)
{ after(grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleAdditiveExpression
{ after(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
(rule__RelationalExpression__Group_1__0)*
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getComparativeExpressionLhsAction_1_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getComparativeExpressionLhsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__1__Impl
	rule__RelationalExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_1()); }
(rule__RelationalExpression__OpAssignment_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_2()); }
(rule__RelationalExpression__RhsAssignment_1_2)
{ after(grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
(rule__AdditiveExpression__Group_1__0)*
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLhsAction_1_0()); }
(

)
{ after(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLhsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__1__Impl
	rule__AdditiveExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_1()); }
(rule__AdditiveExpression__OpAssignment_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_2()); }
(rule__AdditiveExpression__RhsAssignment_1_2)
{ after(grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
	ruleUnaryExpression
{ after(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
(rule__MultiplicativeExpression__Group_1__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLhsAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLhsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__1__Impl
	rule__MultiplicativeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1()); }
(rule__MultiplicativeExpression__OpAssignment_1_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_2()); }
(rule__MultiplicativeExpression__RhsAssignment_1_2)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnaryExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_0__0__Impl
	rule__UnaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getNotExpressionAction_0_0()); }
(

)
{ after(grammarAccess.getUnaryExpressionAccess().getNotExpressionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_0__1__Impl
	rule__UnaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0_1()); }
(rule__UnaryExpression__OpAssignment_0_1)
{ after(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_0_2()); }
(rule__UnaryExpression__OperandAssignment_0_2)
{ after(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1__0__Impl
	rule__UnaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getPlusExpressionAction_1_0()); }
(

)
{ after(grammarAccess.getUnaryExpressionAccess().getPlusExpressionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1__1__Impl
	rule__UnaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpAssignment_1_1()); }
(rule__UnaryExpression__OpAssignment_1_1)
{ after(grammarAccess.getUnaryExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_1_2()); }
(rule__UnaryExpression__OperandAssignment_1_2)
{ after(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnaryExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_2__0__Impl
	rule__UnaryExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getMinusExpressionAction_2_0()); }
(

)
{ after(grammarAccess.getUnaryExpressionAccess().getMinusExpressionAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_2__1__Impl
	rule__UnaryExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpAssignment_2_1()); }
(rule__UnaryExpression__OpAssignment_2_1)
{ after(grammarAccess.getUnaryExpressionAccess().getOpAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_2_2()); }
(rule__UnaryExpression__OperandAssignment_2_2)
{ after(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__CapabilitySelection__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CapabilitySelection__Group__0__Impl
	rule__CapabilitySelection__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CapabilitySelection__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCapabilitySelectionAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getCapabilitySelectionAccess().getPrimaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CapabilitySelection__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CapabilitySelection__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CapabilitySelection__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCapabilitySelectionAccess().getGroup_1()); }
(rule__CapabilitySelection__Group_1__0)*
{ after(grammarAccess.getCapabilitySelectionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CapabilitySelection__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CapabilitySelection__Group_1__0__Impl
	rule__CapabilitySelection__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CapabilitySelection__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCapabilitySelectionAccess().getGroup_1_0()); }
(rule__CapabilitySelection__Group_1_0__0)
{ after(grammarAccess.getCapabilitySelectionAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CapabilitySelection__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CapabilitySelection__Group_1__1__Impl
	rule__CapabilitySelection__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CapabilitySelection__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCapabilitySelectionAccess().getCapabilityAssignment_1_1()); }
(rule__CapabilitySelection__CapabilityAssignment_1_1)
{ after(grammarAccess.getCapabilitySelectionAccess().getCapabilityAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CapabilitySelection__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CapabilitySelection__Group_1__2__Impl
	rule__CapabilitySelection__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CapabilitySelection__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCapabilitySelectionAccess().getLeftParenthesisKeyword_1_2()); }

	'(' 

{ after(grammarAccess.getCapabilitySelectionAccess().getLeftParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CapabilitySelection__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CapabilitySelection__Group_1__3__Impl
	rule__CapabilitySelection__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CapabilitySelection__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCapabilitySelectionAccess().getGroup_1_3()); }
(rule__CapabilitySelection__Group_1_3__0)?
{ after(grammarAccess.getCapabilitySelectionAccess().getGroup_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CapabilitySelection__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CapabilitySelection__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CapabilitySelection__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCapabilitySelectionAccess().getRightParenthesisKeyword_1_4()); }

	')' 

{ after(grammarAccess.getCapabilitySelectionAccess().getRightParenthesisKeyword_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__CapabilitySelection__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CapabilitySelection__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CapabilitySelection__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCapabilitySelectionAccess().getGroup_1_0_0()); }
(rule__CapabilitySelection__Group_1_0_0__0)
{ after(grammarAccess.getCapabilitySelectionAccess().getGroup_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__CapabilitySelection__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CapabilitySelection__Group_1_0_0__0__Impl
	rule__CapabilitySelection__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CapabilitySelection__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCapabilitySelectionAccess().getCapabilitySelectionReceiverAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getCapabilitySelectionAccess().getCapabilitySelectionReceiverAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CapabilitySelection__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CapabilitySelection__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CapabilitySelection__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCapabilitySelectionAccess().getFullStopKeyword_1_0_0_1()); }

	'.' 

{ after(grammarAccess.getCapabilitySelectionAccess().getFullStopKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CapabilitySelection__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CapabilitySelection__Group_1_3__0__Impl
	rule__CapabilitySelection__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CapabilitySelection__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCapabilitySelectionAccess().getArgsAssignment_1_3_0()); }
(rule__CapabilitySelection__ArgsAssignment_1_3_0)
{ after(grammarAccess.getCapabilitySelectionAccess().getArgsAssignment_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CapabilitySelection__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CapabilitySelection__Group_1_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CapabilitySelection__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCapabilitySelectionAccess().getGroup_1_3_1()); }
(rule__CapabilitySelection__Group_1_3_1__0)*
{ after(grammarAccess.getCapabilitySelectionAccess().getGroup_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CapabilitySelection__Group_1_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CapabilitySelection__Group_1_3_1__0__Impl
	rule__CapabilitySelection__Group_1_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CapabilitySelection__Group_1_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCapabilitySelectionAccess().getCommaKeyword_1_3_1_0()); }

	',' 

{ after(grammarAccess.getCapabilitySelectionAccess().getCommaKeyword_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CapabilitySelection__Group_1_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CapabilitySelection__Group_1_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CapabilitySelection__Group_1_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCapabilitySelectionAccess().getArgsAssignment_1_3_1_1()); }
(rule__CapabilitySelection__ArgsAssignment_1_3_1_1)
{ after(grammarAccess.getCapabilitySelectionAccess().getArgsAssignment_1_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParenthesizedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__0__Impl
	rule__ParenthesizedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__1__Impl
	rule__ParenthesizedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1()); }
	ruleExpression
{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LiteralExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_0__0__Impl
	rule__LiteralExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getIntegerLiteralAction_0_0()); }
(

)
{ after(grammarAccess.getLiteralExpressionAccess().getIntegerLiteralAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getValueAssignment_0_1()); }
(rule__LiteralExpression__ValueAssignment_0_1)
{ after(grammarAccess.getLiteralExpressionAccess().getValueAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_1__0__Impl
	rule__LiteralExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getStringLiteralAction_1_0()); }
(

)
{ after(grammarAccess.getLiteralExpressionAccess().getStringLiteralAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getValueAssignment_1_1()); }
(rule__LiteralExpression__ValueAssignment_1_1)
{ after(grammarAccess.getLiteralExpressionAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_2__0__Impl
	rule__LiteralExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getEnumLiteralAction_2_0()); }
(

)
{ after(grammarAccess.getLiteralExpressionAccess().getEnumLiteralAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_2__1__Impl
	rule__LiteralExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getEnumerationAssignment_2_1()); }
(rule__LiteralExpression__EnumerationAssignment_2_1)
{ after(grammarAccess.getLiteralExpressionAccess().getEnumerationAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_2__2__Impl
	rule__LiteralExpression__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getColonColonKeyword_2_2()); }

	'::' 

{ after(grammarAccess.getLiteralExpressionAccess().getColonColonKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getLiteralAssignment_2_3()); }
(rule__LiteralExpression__LiteralAssignment_2_3)
{ after(grammarAccess.getLiteralExpressionAccess().getLiteralAssignment_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LiteralExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_3__0__Impl
	rule__LiteralExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getCollectionLiteralAction_3_0()); }
(

)
{ after(grammarAccess.getLiteralExpressionAccess().getCollectionLiteralAction_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_3__1__Impl
	rule__LiteralExpression__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getLeftSquareBracketKeyword_3_1()); }

	'[' 

{ after(grammarAccess.getLiteralExpressionAccess().getLeftSquareBracketKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_3__2__Impl
	rule__LiteralExpression__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getValueAssignment_3_2()); }
(rule__LiteralExpression__ValueAssignment_3_2)
{ after(grammarAccess.getLiteralExpressionAccess().getValueAssignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_3__3__Impl
	rule__LiteralExpression__Group_3__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getGroup_3_3()); }
(rule__LiteralExpression__Group_3_3__0)*
{ after(grammarAccess.getLiteralExpressionAccess().getGroup_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_3__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_3__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_3__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getRightSquareBracketKeyword_3_4()); }

	']' 

{ after(grammarAccess.getLiteralExpressionAccess().getRightSquareBracketKeyword_3_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__LiteralExpression__Group_3_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_3_3__0__Impl
	rule__LiteralExpression__Group_3_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_3_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getCommaKeyword_3_3_0()); }

	',' 

{ after(grammarAccess.getLiteralExpressionAccess().getCommaKeyword_3_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_3_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_3_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_3_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getValueAssignment_3_3_1()); }
(rule__LiteralExpression__ValueAssignment_3_3_1)
{ after(grammarAccess.getLiteralExpressionAccess().getValueAssignment_3_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralExpression__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_4__0__Impl
	rule__LiteralExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getBooleanLiteralAction_4_0()); }
(

)
{ after(grammarAccess.getLiteralExpressionAccess().getBooleanLiteralAction_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpression__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getAlternatives_4_1()); }
(rule__LiteralExpression__Alternatives_4_1)
{ after(grammarAccess.getLiteralExpressionAccess().getAlternatives_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); }
	ruleValidID
{ after(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
(
	'.' 
)
{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); }
	ruleValidID
{ after(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__IoTModel__TypesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIoTModelAccess().getTypesTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getIoTModelAccess().getTypesTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IoTModel__ConfigurationAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIoTModelAccess().getConfigurationNetworkConfigurationParserRuleCall_2_0()); }
	ruleNetworkConfiguration{ after(grammarAccess.getIoTModelAccess().getConfigurationNetworkConfigurationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IoTModel__RulesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIoTModelAccess().getRulesRuleParserRuleCall_3_0()); }
	ruleRule{ after(grammarAccess.getIoTModelAccess().getRulesRuleParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getNameValidIDParserRuleCall_1_0()); }
	ruleValidID{ after(grammarAccess.getEnumerationAccess().getNameValidIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Enumeration__LiteralsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationAccess().getLiteralsEnumerationLiteralParserRuleCall_3_0_0()); }
	ruleEnumerationLiteral{ after(grammarAccess.getEnumerationAccess().getLiteralsEnumerationLiteralParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationLiteral__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationLiteralAccess().getNameValidIDParserRuleCall_1_0()); }
	ruleValidID{ after(grammarAccess.getEnumerationLiteralAccess().getNameValidIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Cloud__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCloudAccess().getNameValidIDParserRuleCall_2_0()); }
	ruleValidID{ after(grammarAccess.getCloudAccess().getNameValidIDParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Gateway__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGatewayAccess().getNameValidIDParserRuleCall_2_0()); }
	ruleValidID{ after(grammarAccess.getGatewayAccess().getNameValidIDParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Router__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRouterAccess().getNameValidIDParserRuleCall_2_0()); }
	ruleValidID{ after(grammarAccess.getRouterAccess().getNameValidIDParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Device__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeviceAccess().getNameValidIDParserRuleCall_2_0()); }
	ruleValidID{ after(grammarAccess.getDeviceAccess().getNameValidIDParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Device__FeaturesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeviceAccess().getFeaturesFeatureParserRuleCall_4_0()); }
	ruleFeature{ after(grammarAccess.getDeviceAccess().getFeaturesFeatureParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Property__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getNameValidIDParserRuleCall_1_0()); }
	ruleValidID{ after(grammarAccess.getPropertyAccess().getNameValidIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Property__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getTypeTypeReferenceParserRuleCall_3_0()); }
	ruleTypeReference{ after(grammarAccess.getPropertyAccess().getTypeTypeReferenceParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sensing__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensingAccess().getNameValidIDParserRuleCall_2_0()); }
	ruleValidID{ after(grammarAccess.getSensingAccess().getNameValidIDParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sensing__ParametersAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensingAccess().getParametersParameterParserRuleCall_4_0_0()); }
	ruleParameter{ after(grammarAccess.getSensingAccess().getParametersParameterParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sensing__ParametersAssignment_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSensingAccess().getParametersParameterParserRuleCall_4_1_1_0()); }
	ruleParameter{ after(grammarAccess.getSensingAccess().getParametersParameterParserRuleCall_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Actuating__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActuatingAccess().getNameValidIDParserRuleCall_2_0()); }
	ruleValidID{ after(grammarAccess.getActuatingAccess().getNameValidIDParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Actuating__ParametersAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActuatingAccess().getParametersParameterParserRuleCall_4_0_0()); }
	ruleParameter{ after(grammarAccess.getActuatingAccess().getParametersParameterParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Actuating__ParametersAssignment_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActuatingAccess().getParametersParameterParserRuleCall_4_1_1_0()); }
	ruleParameter{ after(grammarAccess.getActuatingAccess().getParametersParameterParserRuleCall_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameValidIDParserRuleCall_0_0()); }
	ruleValidID{ after(grammarAccess.getParameterAccess().getNameValidIDParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeTypeReferenceParserRuleCall_2_0()); }
	ruleTypeReference{ after(grammarAccess.getParameterAccess().getTypeTypeReferenceParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__PtypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeReferenceAccess().getPtypePrimitiveTypeParserRuleCall_0_0()); }
	rulePrimitiveType{ after(grammarAccess.getTypeReferenceAccess().getPtypePrimitiveTypeParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__DtypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeReferenceAccess().getDtypeDeclaredTypeCrossReference_1_0()); }
(
{ before(grammarAccess.getTypeReferenceAccess().getDtypeDeclaredTypeQualifiedNameParserRuleCall_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getTypeReferenceAccess().getDtypeDeclaredTypeQualifiedNameParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getTypeReferenceAccess().getDtypeDeclaredTypeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerTypeAccess().getNameIntegerKeyword_1_0()); }
(
{ before(grammarAccess.getIntegerTypeAccess().getNameIntegerKeyword_1_0()); }

	'integer' 

{ after(grammarAccess.getIntegerTypeAccess().getNameIntegerKeyword_1_0()); }
)

{ after(grammarAccess.getIntegerTypeAccess().getNameIntegerKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanTypeAccess().getNameBooleanKeyword_1_0()); }
(
{ before(grammarAccess.getBooleanTypeAccess().getNameBooleanKeyword_1_0()); }

	'boolean' 

{ after(grammarAccess.getBooleanTypeAccess().getNameBooleanKeyword_1_0()); }
)

{ after(grammarAccess.getBooleanTypeAccess().getNameBooleanKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeAccess().getNameStringKeyword_1_0()); }
(
{ before(grammarAccess.getStringTypeAccess().getNameStringKeyword_1_0()); }

	'string' 

{ after(grammarAccess.getStringTypeAccess().getNameStringKeyword_1_0()); }
)

{ after(grammarAccess.getStringTypeAccess().getNameStringKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealTypeAccess().getNameRealKeyword_1_0()); }
(
{ before(grammarAccess.getRealTypeAccess().getNameRealKeyword_1_0()); }

	'real' 

{ after(grammarAccess.getRealTypeAccess().getNameRealKeyword_1_0()); }
)

{ after(grammarAccess.getRealTypeAccess().getNameRealKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NetworkConfiguration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNetworkConfigurationAccess().getNameValidIDParserRuleCall_2_0()); }
	ruleValidID{ after(grammarAccess.getNetworkConfigurationAccess().getNameValidIDParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NetworkConfiguration__NodesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNetworkConfigurationAccess().getNodesNodeInstanceParserRuleCall_4_0()); }
	ruleNodeInstance{ after(grammarAccess.getNetworkConfigurationAccess().getNodesNodeInstanceParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NetworkConfiguration__PathsAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNetworkConfigurationAccess().getPathsCommunicationPathParserRuleCall_5_0()); }
	ruleCommunicationPath{ after(grammarAccess.getNetworkConfigurationAccess().getPathsCommunicationPathParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NetworkConfiguration__VariablesAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNetworkConfigurationAccess().getVariablesVariableDeclarationParserRuleCall_6_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getNetworkConfigurationAccess().getVariablesVariableDeclarationParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstance__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceAccess().getNameValidIDParserRuleCall_1_0()); }
	ruleValidID{ after(grammarAccess.getNodeInstanceAccess().getNameValidIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeInstance__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeInstanceAccess().getTypeNodeCrossReference_3_0()); }
(
{ before(grammarAccess.getNodeInstanceAccess().getTypeNodeValidIDParserRuleCall_3_0_1()); }
	ruleValidID{ after(grammarAccess.getNodeInstanceAccess().getTypeNodeValidIDParserRuleCall_3_0_1()); }
)
{ after(grammarAccess.getNodeInstanceAccess().getTypeNodeCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CommunicationPath__SrcAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommunicationPathAccess().getSrcNodeInstanceCrossReference_1_0()); }
(
{ before(grammarAccess.getCommunicationPathAccess().getSrcNodeInstanceValidIDParserRuleCall_1_0_1()); }
	ruleValidID{ after(grammarAccess.getCommunicationPathAccess().getSrcNodeInstanceValidIDParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getCommunicationPathAccess().getSrcNodeInstanceCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CommunicationPath__TgtAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommunicationPathAccess().getTgtNodeInstanceCrossReference_3_0()); }
(
{ before(grammarAccess.getCommunicationPathAccess().getTgtNodeInstanceValidIDParserRuleCall_3_0_1()); }
	ruleValidID{ after(grammarAccess.getCommunicationPathAccess().getTgtNodeInstanceValidIDParserRuleCall_3_0_1()); }
)
{ after(grammarAccess.getCommunicationPathAccess().getTgtNodeInstanceCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CommunicationPath__ProtocolAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCommunicationPathAccess().getProtocolProtocolEnumRuleCall_5_0()); }
	ruleProtocol{ after(grammarAccess.getCommunicationPathAccess().getProtocolProtocolEnumRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameValidIDParserRuleCall_1_0()); }
	ruleValidID{ after(grammarAccess.getVariableDeclarationAccess().getNameValidIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__InitAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getInitExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getVariableDeclarationAccess().getInitExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getNameValidIDParserRuleCall_1_0()); }
	ruleValidID{ after(grammarAccess.getRuleAccess().getNameValidIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__TriggerAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getTriggerExpressionParserRuleCall_5_0()); }
	ruleExpression{ after(grammarAccess.getRuleAccess().getTriggerExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ReactionAssignment_9
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getReactionReactionParserRuleCall_9_0()); }
	ruleReaction{ after(grammarAccess.getRuleAccess().getReactionReactionParserRuleCall_9_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelComposition__RhsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelCompositionAccess().getRhsSeqCompositionParserRuleCall_1_2_0()); }
	ruleSeqComposition{ after(grammarAccess.getParallelCompositionAccess().getRhsSeqCompositionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SeqComposition__RhsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqCompositionAccess().getRhsSimpleReactionParserRuleCall_1_2_0()); }
	ruleSimpleReaction{ after(grammarAccess.getSeqCompositionAccess().getRhsSimpleReactionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleReaction__ExpAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleReactionAccess().getExpExpressionParserRuleCall_0()); }
	ruleExpression{ after(grammarAccess.getSimpleReactionAccess().getExpExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOpOrKeyword_1_1_0()); }
(
{ before(grammarAccess.getOrExpressionAccess().getOpOrKeyword_1_1_0()); }

	'or' 

{ after(grammarAccess.getOrExpressionAccess().getOpOrKeyword_1_1_0()); }
)

{ after(grammarAccess.getOrExpressionAccess().getOpOrKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RhsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRhsAndExpressionParserRuleCall_1_2_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getRhsAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOpAndKeyword_1_1_0()); }
(
{ before(grammarAccess.getAndExpressionAccess().getOpAndKeyword_1_1_0()); }

	'and' 

{ after(grammarAccess.getAndExpressionAccess().getOpAndKeyword_1_1_0()); }
)

{ after(grammarAccess.getAndExpressionAccess().getOpAndKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RhsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_2_0()); }
	ruleEqualityExpression{ after(grammarAccess.getAndExpressionAccess().getRhsEqualityExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getOpAlternatives_1_1_0()); }
(rule__EqualityExpression__OpAlternatives_1_1_0)
{ after(grammarAccess.getEqualityExpressionAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__RhsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_2_0()); }
	ruleRelationalExpression{ after(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOpAlternatives_1_1_0()); }
(rule__RelationalExpression__OpAlternatives_1_1_0)
{ after(grammarAccess.getRelationalExpressionAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RhsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRhsAdditiveExpressionParserRuleCall_1_2_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionAccess().getRhsAdditiveExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpAlternatives_1_1_0()); }
(rule__AdditiveExpression__OpAlternatives_1_1_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RhsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRhsMultiplicativeExpressionParserRuleCall_1_2_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getRhsMultiplicativeExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAlternatives_1_1_0()); }
(rule__MultiplicativeExpression__OpAlternatives_1_1_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RhsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRhsUnaryExpressionParserRuleCall_1_2_0()); }
	ruleUnaryExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getRhsUnaryExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpNotKeyword_0_1_0()); }
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpNotKeyword_0_1_0()); }

	'not' 

{ after(grammarAccess.getUnaryExpressionAccess().getOpNotKeyword_0_1_0()); }
)

{ after(grammarAccess.getUnaryExpressionAccess().getOpNotKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OperandAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperandUnaryExpressionParserRuleCall_0_2_0()); }
	ruleUnaryExpression{ after(grammarAccess.getUnaryExpressionAccess().getOperandUnaryExpressionParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpPlusSignKeyword_1_1_0()); }
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpPlusSignKeyword_1_1_0()); }

	'+' 

{ after(grammarAccess.getUnaryExpressionAccess().getOpPlusSignKeyword_1_1_0()); }
)

{ after(grammarAccess.getUnaryExpressionAccess().getOpPlusSignKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OperandAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperandUnaryExpressionParserRuleCall_1_2_0()); }
	ruleUnaryExpression{ after(grammarAccess.getUnaryExpressionAccess().getOperandUnaryExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_2_1_0()); }
(
{ before(grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_2_1_0()); }

	'-' 

{ after(grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_2_1_0()); }
)

{ after(grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OperandAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getOperandUnaryExpressionParserRuleCall_2_2_0()); }
	ruleUnaryExpression{ after(grammarAccess.getUnaryExpressionAccess().getOperandUnaryExpressionParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CapabilitySelection__CapabilityAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCapabilitySelectionAccess().getCapabilityCapabilityCrossReference_1_1_0()); }
(
{ before(grammarAccess.getCapabilitySelectionAccess().getCapabilityCapabilityValidIDParserRuleCall_1_1_0_1()); }
	ruleValidID{ after(grammarAccess.getCapabilitySelectionAccess().getCapabilityCapabilityValidIDParserRuleCall_1_1_0_1()); }
)
{ after(grammarAccess.getCapabilitySelectionAccess().getCapabilityCapabilityCrossReference_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CapabilitySelection__ArgsAssignment_1_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCapabilitySelectionAccess().getArgsExpressionParserRuleCall_1_3_0_0()); }
	ruleExpression{ after(grammarAccess.getCapabilitySelectionAccess().getArgsExpressionParserRuleCall_1_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CapabilitySelection__ArgsAssignment_1_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCapabilitySelectionAccess().getArgsExpressionParserRuleCall_1_3_1_1_0()); }
	ruleExpression{ after(grammarAccess.getCapabilitySelectionAccess().getArgsExpressionParserRuleCall_1_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Target__RefAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTargetAccess().getRefNodeInstanceCrossReference_0()); }
(
{ before(grammarAccess.getTargetAccess().getRefNodeInstanceValidIDParserRuleCall_0_1()); }
	ruleValidID{ after(grammarAccess.getTargetAccess().getRefNodeInstanceValidIDParserRuleCall_0_1()); }
)
{ after(grammarAccess.getTargetAccess().getRefNodeInstanceCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__ValueAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getValueINTTerminalRuleCall_0_1_0()); }
	RULE_INT{ after(grammarAccess.getLiteralExpressionAccess().getValueINTTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
	RULE_STRING{ after(grammarAccess.getLiteralExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__EnumerationAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getEnumerationEnumerationCrossReference_2_1_0()); }
(
{ before(grammarAccess.getLiteralExpressionAccess().getEnumerationEnumerationQualifiedNameParserRuleCall_2_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getLiteralExpressionAccess().getEnumerationEnumerationQualifiedNameParserRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getLiteralExpressionAccess().getEnumerationEnumerationCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__LiteralAssignment_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getLiteralEnumerationLiteralCrossReference_2_3_0()); }
(
{ before(grammarAccess.getLiteralExpressionAccess().getLiteralEnumerationLiteralIDTerminalRuleCall_2_3_0_1()); }
	RULE_ID{ after(grammarAccess.getLiteralExpressionAccess().getLiteralEnumerationLiteralIDTerminalRuleCall_2_3_0_1()); }
)
{ after(grammarAccess.getLiteralExpressionAccess().getLiteralEnumerationLiteralCrossReference_2_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__ValueAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getValueTargetParserRuleCall_3_2_0()); }
	ruleTarget{ after(grammarAccess.getLiteralExpressionAccess().getValueTargetParserRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__ValueAssignment_3_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getValueTargetParserRuleCall_3_3_1_0()); }
	ruleTarget{ after(grammarAccess.getLiteralExpressionAccess().getValueTargetParserRuleCall_3_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__IsTrueAssignment_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAccess().getIsTrueTrueKeyword_4_1_1_0()); }
(
{ before(grammarAccess.getLiteralExpressionAccess().getIsTrueTrueKeyword_4_1_1_0()); }

	'true' 

{ after(grammarAccess.getLiteralExpressionAccess().getIsTrueTrueKeyword_4_1_1_0()); }
)

{ after(grammarAccess.getLiteralExpressionAccess().getIsTrueTrueKeyword_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


