/*
 * generated by Xtext
 */
package be.unamur.iotdevice.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import be.unamur.iotdevice.services.IoTDeviceGrammarAccess;

public class IoTDeviceParser extends AbstractContentAssistParser {
	
	@Inject
	private IoTDeviceGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected be.unamur.iotdevice.ui.contentassist.antlr.internal.InternalIoTDeviceParser createParser() {
		be.unamur.iotdevice.ui.contentassist.antlr.internal.InternalIoTDeviceParser result = new be.unamur.iotdevice.ui.contentassist.antlr.internal.InternalIoTDeviceParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getDeclaredTypeAccess().getAlternatives(), "rule__DeclaredType__Alternatives");
					put(grammarAccess.getNodeAccess().getAlternatives(), "rule__Node__Alternatives");
					put(grammarAccess.getCapabilityAccess().getAlternatives(), "rule__Capability__Alternatives");
					put(grammarAccess.getTypeReferenceAccess().getAlternatives(), "rule__TypeReference__Alternatives");
					put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
					put(grammarAccess.getEqualityExpressionAccess().getOpAlternatives_1_1_0(), "rule__EqualityExpression__OpAlternatives_1_1_0");
					put(grammarAccess.getRelationalExpressionAccess().getOpAlternatives_1_1_0(), "rule__RelationalExpression__OpAlternatives_1_1_0");
					put(grammarAccess.getAdditiveExpressionAccess().getOpAlternatives_1_1_0(), "rule__AdditiveExpression__OpAlternatives_1_1_0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getOpAlternatives_1_1_0(), "rule__MultiplicativeExpression__OpAlternatives_1_1_0");
					put(grammarAccess.getUnaryExpressionAccess().getAlternatives(), "rule__UnaryExpression__Alternatives");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getLiteralExpressionAccess().getAlternatives(), "rule__LiteralExpression__Alternatives");
					put(grammarAccess.getLiteralExpressionAccess().getAlternatives_4_1(), "rule__LiteralExpression__Alternatives_4_1");
					put(grammarAccess.getProtocolAccess().getAlternatives(), "rule__Protocol__Alternatives");
					put(grammarAccess.getIoTModelAccess().getGroup(), "rule__IoTModel__Group__0");
					put(grammarAccess.getEnumerationAccess().getGroup(), "rule__Enumeration__Group__0");
					put(grammarAccess.getEnumerationAccess().getGroup_3(), "rule__Enumeration__Group_3__0");
					put(grammarAccess.getEnumerationLiteralAccess().getGroup(), "rule__EnumerationLiteral__Group__0");
					put(grammarAccess.getCloudAccess().getGroup(), "rule__Cloud__Group__0");
					put(grammarAccess.getGatewayAccess().getGroup(), "rule__Gateway__Group__0");
					put(grammarAccess.getRouterAccess().getGroup(), "rule__Router__Group__0");
					put(grammarAccess.getDeviceAccess().getGroup(), "rule__Device__Group__0");
					put(grammarAccess.getSensingAccess().getGroup(), "rule__Sensing__Group__0");
					put(grammarAccess.getSensingAccess().getGroup_4(), "rule__Sensing__Group_4__0");
					put(grammarAccess.getSensingAccess().getGroup_4_1(), "rule__Sensing__Group_4_1__0");
					put(grammarAccess.getActuatingAccess().getGroup(), "rule__Actuating__Group__0");
					put(grammarAccess.getActuatingAccess().getGroup_4(), "rule__Actuating__Group_4__0");
					put(grammarAccess.getActuatingAccess().getGroup_4_1(), "rule__Actuating__Group_4_1__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getIntegerTypeAccess().getGroup(), "rule__IntegerType__Group__0");
					put(grammarAccess.getBooleanTypeAccess().getGroup(), "rule__BooleanType__Group__0");
					put(grammarAccess.getStringTypeAccess().getGroup(), "rule__StringType__Group__0");
					put(grammarAccess.getRealTypeAccess().getGroup(), "rule__RealType__Group__0");
					put(grammarAccess.getNetworkConfigurationAccess().getGroup(), "rule__NetworkConfiguration__Group__0");
					put(grammarAccess.getNodeInstanceAccess().getGroup(), "rule__NodeInstance__Group__0");
					put(grammarAccess.getCommunicationPathAccess().getGroup(), "rule__CommunicationPath__Group__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getParallelCompositionAccess().getGroup(), "rule__ParallelComposition__Group__0");
					put(grammarAccess.getParallelCompositionAccess().getGroup_1(), "rule__ParallelComposition__Group_1__0");
					put(grammarAccess.getSeqCompositionAccess().getGroup(), "rule__SeqComposition__Group__0");
					put(grammarAccess.getSeqCompositionAccess().getGroup_1(), "rule__SeqComposition__Group_1__0");
					put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
					put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
					put(grammarAccess.getEqualityExpressionAccess().getGroup(), "rule__EqualityExpression__Group__0");
					put(grammarAccess.getEqualityExpressionAccess().getGroup_1(), "rule__EqualityExpression__Group_1__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup(), "rule__RelationalExpression__Group__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1(), "rule__RelationalExpression__Group_1__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup(), "rule__AdditiveExpression__Group__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup_1(), "rule__AdditiveExpression__Group_1__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup(), "rule__MultiplicativeExpression__Group__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1(), "rule__MultiplicativeExpression__Group_1__0");
					put(grammarAccess.getUnaryExpressionAccess().getGroup_0(), "rule__UnaryExpression__Group_0__0");
					put(grammarAccess.getUnaryExpressionAccess().getGroup_1(), "rule__UnaryExpression__Group_1__0");
					put(grammarAccess.getUnaryExpressionAccess().getGroup_2(), "rule__UnaryExpression__Group_2__0");
					put(grammarAccess.getCapabilitySelectionAccess().getGroup(), "rule__CapabilitySelection__Group__0");
					put(grammarAccess.getCapabilitySelectionAccess().getGroup_1(), "rule__CapabilitySelection__Group_1__0");
					put(grammarAccess.getCapabilitySelectionAccess().getGroup_1_0(), "rule__CapabilitySelection__Group_1_0__0");
					put(grammarAccess.getCapabilitySelectionAccess().getGroup_1_0_0(), "rule__CapabilitySelection__Group_1_0_0__0");
					put(grammarAccess.getCapabilitySelectionAccess().getGroup_1_3(), "rule__CapabilitySelection__Group_1_3__0");
					put(grammarAccess.getCapabilitySelectionAccess().getGroup_1_3_1(), "rule__CapabilitySelection__Group_1_3_1__0");
					put(grammarAccess.getParenthesizedExpressionAccess().getGroup(), "rule__ParenthesizedExpression__Group__0");
					put(grammarAccess.getLiteralExpressionAccess().getGroup_0(), "rule__LiteralExpression__Group_0__0");
					put(grammarAccess.getLiteralExpressionAccess().getGroup_1(), "rule__LiteralExpression__Group_1__0");
					put(grammarAccess.getLiteralExpressionAccess().getGroup_2(), "rule__LiteralExpression__Group_2__0");
					put(grammarAccess.getLiteralExpressionAccess().getGroup_3(), "rule__LiteralExpression__Group_3__0");
					put(grammarAccess.getLiteralExpressionAccess().getGroup_3_3(), "rule__LiteralExpression__Group_3_3__0");
					put(grammarAccess.getLiteralExpressionAccess().getGroup_4(), "rule__LiteralExpression__Group_4__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getIoTModelAccess().getTypesAssignment_1(), "rule__IoTModel__TypesAssignment_1");
					put(grammarAccess.getIoTModelAccess().getConfigurationAssignment_2(), "rule__IoTModel__ConfigurationAssignment_2");
					put(grammarAccess.getIoTModelAccess().getRulesAssignment_3(), "rule__IoTModel__RulesAssignment_3");
					put(grammarAccess.getEnumerationAccess().getNameAssignment_1(), "rule__Enumeration__NameAssignment_1");
					put(grammarAccess.getEnumerationAccess().getLiteralsAssignment_3_0(), "rule__Enumeration__LiteralsAssignment_3_0");
					put(grammarAccess.getEnumerationLiteralAccess().getNameAssignment_1(), "rule__EnumerationLiteral__NameAssignment_1");
					put(grammarAccess.getCloudAccess().getNameAssignment_2(), "rule__Cloud__NameAssignment_2");
					put(grammarAccess.getGatewayAccess().getNameAssignment_2(), "rule__Gateway__NameAssignment_2");
					put(grammarAccess.getRouterAccess().getNameAssignment_2(), "rule__Router__NameAssignment_2");
					put(grammarAccess.getDeviceAccess().getNameAssignment_2(), "rule__Device__NameAssignment_2");
					put(grammarAccess.getDeviceAccess().getCapabilitiesAssignment_4(), "rule__Device__CapabilitiesAssignment_4");
					put(grammarAccess.getSensingAccess().getNameAssignment_2(), "rule__Sensing__NameAssignment_2");
					put(grammarAccess.getSensingAccess().getParametersAssignment_4_0(), "rule__Sensing__ParametersAssignment_4_0");
					put(grammarAccess.getSensingAccess().getParametersAssignment_4_1_1(), "rule__Sensing__ParametersAssignment_4_1_1");
					put(grammarAccess.getActuatingAccess().getNameAssignment_2(), "rule__Actuating__NameAssignment_2");
					put(grammarAccess.getActuatingAccess().getParametersAssignment_4_0(), "rule__Actuating__ParametersAssignment_4_0");
					put(grammarAccess.getActuatingAccess().getParametersAssignment_4_1_1(), "rule__Actuating__ParametersAssignment_4_1_1");
					put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
					put(grammarAccess.getParameterAccess().getTypeAssignment_2(), "rule__Parameter__TypeAssignment_2");
					put(grammarAccess.getTypeReferenceAccess().getPtypeAssignment_0(), "rule__TypeReference__PtypeAssignment_0");
					put(grammarAccess.getTypeReferenceAccess().getDtypeAssignment_1(), "rule__TypeReference__DtypeAssignment_1");
					put(grammarAccess.getIntegerTypeAccess().getNameAssignment_1(), "rule__IntegerType__NameAssignment_1");
					put(grammarAccess.getBooleanTypeAccess().getNameAssignment_1(), "rule__BooleanType__NameAssignment_1");
					put(grammarAccess.getStringTypeAccess().getNameAssignment_1(), "rule__StringType__NameAssignment_1");
					put(grammarAccess.getRealTypeAccess().getNameAssignment_1(), "rule__RealType__NameAssignment_1");
					put(grammarAccess.getNetworkConfigurationAccess().getNameAssignment_2(), "rule__NetworkConfiguration__NameAssignment_2");
					put(grammarAccess.getNetworkConfigurationAccess().getNodesAssignment_4(), "rule__NetworkConfiguration__NodesAssignment_4");
					put(grammarAccess.getNetworkConfigurationAccess().getPathsAssignment_5(), "rule__NetworkConfiguration__PathsAssignment_5");
					put(grammarAccess.getNetworkConfigurationAccess().getVariablesAssignment_6(), "rule__NetworkConfiguration__VariablesAssignment_6");
					put(grammarAccess.getNodeInstanceAccess().getNameAssignment_1(), "rule__NodeInstance__NameAssignment_1");
					put(grammarAccess.getNodeInstanceAccess().getTypeAssignment_3(), "rule__NodeInstance__TypeAssignment_3");
					put(grammarAccess.getCommunicationPathAccess().getSrcAssignment_1(), "rule__CommunicationPath__SrcAssignment_1");
					put(grammarAccess.getCommunicationPathAccess().getTgtAssignment_3(), "rule__CommunicationPath__TgtAssignment_3");
					put(grammarAccess.getCommunicationPathAccess().getProtocolAssignment_5(), "rule__CommunicationPath__ProtocolAssignment_5");
					put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1(), "rule__VariableDeclaration__NameAssignment_1");
					put(grammarAccess.getVariableDeclarationAccess().getInitAssignment_3(), "rule__VariableDeclaration__InitAssignment_3");
					put(grammarAccess.getRuleAccess().getNameAssignment_1(), "rule__Rule__NameAssignment_1");
					put(grammarAccess.getRuleAccess().getTriggerAssignment_5(), "rule__Rule__TriggerAssignment_5");
					put(grammarAccess.getRuleAccess().getReactionAssignment_9(), "rule__Rule__ReactionAssignment_9");
					put(grammarAccess.getParallelCompositionAccess().getRhsAssignment_1_2(), "rule__ParallelComposition__RhsAssignment_1_2");
					put(grammarAccess.getSeqCompositionAccess().getRhsAssignment_1_2(), "rule__SeqComposition__RhsAssignment_1_2");
					put(grammarAccess.getSimpleReactionAccess().getExpAssignment(), "rule__SimpleReaction__ExpAssignment");
					put(grammarAccess.getOrExpressionAccess().getOpAssignment_1_1(), "rule__OrExpression__OpAssignment_1_1");
					put(grammarAccess.getOrExpressionAccess().getRhsAssignment_1_2(), "rule__OrExpression__RhsAssignment_1_2");
					put(grammarAccess.getAndExpressionAccess().getOpAssignment_1_1(), "rule__AndExpression__OpAssignment_1_1");
					put(grammarAccess.getAndExpressionAccess().getRhsAssignment_1_2(), "rule__AndExpression__RhsAssignment_1_2");
					put(grammarAccess.getEqualityExpressionAccess().getOpAssignment_1_1(), "rule__EqualityExpression__OpAssignment_1_1");
					put(grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_2(), "rule__EqualityExpression__RhsAssignment_1_2");
					put(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_1(), "rule__RelationalExpression__OpAssignment_1_1");
					put(grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_2(), "rule__RelationalExpression__RhsAssignment_1_2");
					put(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_1(), "rule__AdditiveExpression__OpAssignment_1_1");
					put(grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_2(), "rule__AdditiveExpression__RhsAssignment_1_2");
					put(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1(), "rule__MultiplicativeExpression__OpAssignment_1_1");
					put(grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_2(), "rule__MultiplicativeExpression__RhsAssignment_1_2");
					put(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0_1(), "rule__UnaryExpression__OpAssignment_0_1");
					put(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_0_2(), "rule__UnaryExpression__OperandAssignment_0_2");
					put(grammarAccess.getUnaryExpressionAccess().getOpAssignment_1_1(), "rule__UnaryExpression__OpAssignment_1_1");
					put(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_1_2(), "rule__UnaryExpression__OperandAssignment_1_2");
					put(grammarAccess.getUnaryExpressionAccess().getOpAssignment_2_1(), "rule__UnaryExpression__OpAssignment_2_1");
					put(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_2_2(), "rule__UnaryExpression__OperandAssignment_2_2");
					put(grammarAccess.getCapabilitySelectionAccess().getCapabilityAssignment_1_1(), "rule__CapabilitySelection__CapabilityAssignment_1_1");
					put(grammarAccess.getCapabilitySelectionAccess().getArgsAssignment_1_3_0(), "rule__CapabilitySelection__ArgsAssignment_1_3_0");
					put(grammarAccess.getCapabilitySelectionAccess().getArgsAssignment_1_3_1_1(), "rule__CapabilitySelection__ArgsAssignment_1_3_1_1");
					put(grammarAccess.getTargetAccess().getRefAssignment(), "rule__Target__RefAssignment");
					put(grammarAccess.getLiteralExpressionAccess().getValueAssignment_0_1(), "rule__LiteralExpression__ValueAssignment_0_1");
					put(grammarAccess.getLiteralExpressionAccess().getValueAssignment_1_1(), "rule__LiteralExpression__ValueAssignment_1_1");
					put(grammarAccess.getLiteralExpressionAccess().getEnumerationAssignment_2_1(), "rule__LiteralExpression__EnumerationAssignment_2_1");
					put(grammarAccess.getLiteralExpressionAccess().getLiteralAssignment_2_3(), "rule__LiteralExpression__LiteralAssignment_2_3");
					put(grammarAccess.getLiteralExpressionAccess().getValueAssignment_3_2(), "rule__LiteralExpression__ValueAssignment_3_2");
					put(grammarAccess.getLiteralExpressionAccess().getValueAssignment_3_3_1(), "rule__LiteralExpression__ValueAssignment_3_3_1");
					put(grammarAccess.getLiteralExpressionAccess().getIsTrueAssignment_4_1_1(), "rule__LiteralExpression__IsTrueAssignment_4_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			be.unamur.iotdevice.ui.contentassist.antlr.internal.InternalIoTDeviceParser typedParser = (be.unamur.iotdevice.ui.contentassist.antlr.internal.InternalIoTDeviceParser) parser;
			typedParser.entryRuleIoTModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public IoTDeviceGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(IoTDeviceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
