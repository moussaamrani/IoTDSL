/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.cep.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.cep.ide.contentassist.antlr.internal.InternalCepParser;
import org.xtext.example.cep.services.CepGrammarAccess;

public class CepParser extends AbstractContentAssistParser {

	@Inject
	private CepGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalCepParser createParser() {
		InternalCepParser result = new InternalCepParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
					put(grammarAccess.getEqualityExpressionAccess().getOpAlternatives_1_1_0(), "rule__EqualityExpression__OpAlternatives_1_1_0");
					put(grammarAccess.getRelationalExpressionAccess().getOpAlternatives_1_1_0(), "rule__RelationalExpression__OpAlternatives_1_1_0");
					put(grammarAccess.getAdditiveExpressionAccess().getOpAlternatives_1_1_0(), "rule__AdditiveExpression__OpAlternatives_1_1_0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getOpAlternatives_1_1_0(), "rule__MultiplicativeExpression__OpAlternatives_1_1_0");
					put(grammarAccess.getUnaryExpressionAccess().getAlternatives(), "rule__UnaryExpression__Alternatives");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getLiteralExpressionAccess().getAlternatives(), "rule__LiteralExpression__Alternatives");
					put(grammarAccess.getLiteralExpressionAccess().getAlternatives_2_1(), "rule__LiteralExpression__Alternatives_2_1");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getComplexEventAccess().getGroup(), "rule__ComplexEvent__Group__0");
					put(grammarAccess.getComplexEventAccess().getGroup_2(), "rule__ComplexEvent__Group_2__0");
					put(grammarAccess.getComplexEventAccess().getGroup_2_1(), "rule__ComplexEvent__Group_2_1__0");
					put(grammarAccess.getCEParameterAccess().getGroup(), "rule__CEParameter__Group__0");
					put(grammarAccess.getIntegerTypeAccess().getGroup(), "rule__IntegerType__Group__0");
					put(grammarAccess.getBooleanTypeAccess().getGroup(), "rule__BooleanType__Group__0");
					put(grammarAccess.getStringTypeAccess().getGroup(), "rule__StringType__Group__0");
					put(grammarAccess.getRealTypeAccess().getGroup(), "rule__RealType__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
					put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
					put(grammarAccess.getAsExpressionAccess().getGroup(), "rule__AsExpression__Group__0");
					put(grammarAccess.getAsExpressionAccess().getGroup_1(), "rule__AsExpression__Group_1__0");
					put(grammarAccess.getEqualityExpressionAccess().getGroup(), "rule__EqualityExpression__Group__0");
					put(grammarAccess.getEqualityExpressionAccess().getGroup_1(), "rule__EqualityExpression__Group_1__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup(), "rule__RelationalExpression__Group__0");
					put(grammarAccess.getRelationalExpressionAccess().getGroup_1(), "rule__RelationalExpression__Group_1__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup(), "rule__AdditiveExpression__Group__0");
					put(grammarAccess.getAdditiveExpressionAccess().getGroup_1(), "rule__AdditiveExpression__Group_1__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup(), "rule__MultiplicativeExpression__Group__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1(), "rule__MultiplicativeExpression__Group_1__0");
					put(grammarAccess.getUnaryExpressionAccess().getGroup_0(), "rule__UnaryExpression__Group_0__0");
					put(grammarAccess.getUnaryExpressionAccess().getGroup_1(), "rule__UnaryExpression__Group_1__0");
					put(grammarAccess.getUnaryExpressionAccess().getGroup_2(), "rule__UnaryExpression__Group_2__0");
					put(grammarAccess.getParenthesizedExpressionAccess().getGroup(), "rule__ParenthesizedExpression__Group__0");
					put(grammarAccess.getLiteralExpressionAccess().getGroup_0(), "rule__LiteralExpression__Group_0__0");
					put(grammarAccess.getLiteralExpressionAccess().getGroup_1(), "rule__LiteralExpression__Group_1__0");
					put(grammarAccess.getLiteralExpressionAccess().getGroup_2(), "rule__LiteralExpression__Group_2__0");
					put(grammarAccess.getModelAccess().getRuleAssignment(), "rule__Model__RuleAssignment");
					put(grammarAccess.getRuleAccess().getPatternAssignment_3(), "rule__Rule__PatternAssignment_3");
					put(grammarAccess.getRuleAccess().getConditionExpressionAssignment_5(), "rule__Rule__ConditionExpressionAssignment_5");
					put(grammarAccess.getComplexEventAccess().getNameAssignment_0(), "rule__ComplexEvent__NameAssignment_0");
					put(grammarAccess.getComplexEventAccess().getParamsAssignment_2_0(), "rule__ComplexEvent__ParamsAssignment_2_0");
					put(grammarAccess.getComplexEventAccess().getParamsAssignment_2_1_1(), "rule__ComplexEvent__ParamsAssignment_2_1_1");
					put(grammarAccess.getCEParameterAccess().getNameAssignment_0(), "rule__CEParameter__NameAssignment_0");
					put(grammarAccess.getCEParameterAccess().getTypeAssignment_2(), "rule__CEParameter__TypeAssignment_2");
					put(grammarAccess.getTypeReferenceAccess().getPtypeAssignment(), "rule__TypeReference__PtypeAssignment");
					put(grammarAccess.getIntegerTypeAccess().getNameAssignment_1(), "rule__IntegerType__NameAssignment_1");
					put(grammarAccess.getBooleanTypeAccess().getNameAssignment_1(), "rule__BooleanType__NameAssignment_1");
					put(grammarAccess.getStringTypeAccess().getNameAssignment_1(), "rule__StringType__NameAssignment_1");
					put(grammarAccess.getRealTypeAccess().getNameAssignment_1(), "rule__RealType__NameAssignment_1");
					put(grammarAccess.getOrExpressionAccess().getOpAssignment_1_1(), "rule__OrExpression__OpAssignment_1_1");
					put(grammarAccess.getOrExpressionAccess().getRhsAssignment_1_2(), "rule__OrExpression__RhsAssignment_1_2");
					put(grammarAccess.getAndExpressionAccess().getOpAssignment_1_1(), "rule__AndExpression__OpAssignment_1_1");
					put(grammarAccess.getAndExpressionAccess().getRhsAssignment_1_2(), "rule__AndExpression__RhsAssignment_1_2");
					put(grammarAccess.getAsExpressionAccess().getOpAssignment_1_1(), "rule__AsExpression__OpAssignment_1_1");
					put(grammarAccess.getAsExpressionAccess().getNameofasAssignment_1_2(), "rule__AsExpression__NameofasAssignment_1_2");
					put(grammarAccess.getEqualityExpressionAccess().getOpAssignment_1_1(), "rule__EqualityExpression__OpAssignment_1_1");
					put(grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_2(), "rule__EqualityExpression__RhsAssignment_1_2");
					put(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_1(), "rule__RelationalExpression__OpAssignment_1_1");
					put(grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_2(), "rule__RelationalExpression__RhsAssignment_1_2");
					put(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_1(), "rule__AdditiveExpression__OpAssignment_1_1");
					put(grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_2(), "rule__AdditiveExpression__RhsAssignment_1_2");
					put(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1(), "rule__MultiplicativeExpression__OpAssignment_1_1");
					put(grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_2(), "rule__MultiplicativeExpression__RhsAssignment_1_2");
					put(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0_1(), "rule__UnaryExpression__OpAssignment_0_1");
					put(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_0_2(), "rule__UnaryExpression__OperandAssignment_0_2");
					put(grammarAccess.getUnaryExpressionAccess().getOpAssignment_1_1(), "rule__UnaryExpression__OpAssignment_1_1");
					put(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_1_2(), "rule__UnaryExpression__OperandAssignment_1_2");
					put(grammarAccess.getUnaryExpressionAccess().getOpAssignment_2_1(), "rule__UnaryExpression__OpAssignment_2_1");
					put(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_2_2(), "rule__UnaryExpression__OperandAssignment_2_2");
					put(grammarAccess.getLiteralExpressionAccess().getValueAssignment_0_1(), "rule__LiteralExpression__ValueAssignment_0_1");
					put(grammarAccess.getLiteralExpressionAccess().getValueAssignment_1_1(), "rule__LiteralExpression__ValueAssignment_1_1");
					put(grammarAccess.getLiteralExpressionAccess().getIsTrueAssignment_2_1_1(), "rule__LiteralExpression__IsTrueAssignment_2_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalCepParser typedParser = (InternalCepParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CepGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CepGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
