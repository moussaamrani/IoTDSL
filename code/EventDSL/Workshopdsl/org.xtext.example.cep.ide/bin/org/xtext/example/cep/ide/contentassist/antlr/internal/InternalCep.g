/*
 * generated by Xtext 2.10.0
 */
grammar InternalCep;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.cep.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.cep.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.cep.services.CepGrammarAccess;

}
@parser::members {
	private CepGrammarAccess grammarAccess;

	public void setGrammarAccess(CepGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getRuleAssignment()); }
		(rule__Model__RuleAssignment)*
		{ after(grammarAccess.getModelAccess().getRuleAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComplexEvent
entryRuleComplexEvent
:
{ before(grammarAccess.getComplexEventRule()); }
	 ruleComplexEvent
{ after(grammarAccess.getComplexEventRule()); } 
	 EOF 
;

// Rule ComplexEvent
ruleComplexEvent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComplexEventAccess().getGroup()); }
		(rule__ComplexEvent__Group__0)
		{ after(grammarAccess.getComplexEventAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCEParameter
entryRuleCEParameter
:
{ before(grammarAccess.getCEParameterRule()); }
	 ruleCEParameter
{ after(grammarAccess.getCEParameterRule()); } 
	 EOF 
;

// Rule CEParameter
ruleCEParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCEParameterAccess().getGroup()); }
		(rule__CEParameter__Group__0)
		{ after(grammarAccess.getCEParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeReference
entryRuleTypeReference
:
{ before(grammarAccess.getTypeReferenceRule()); }
	 ruleTypeReference
{ after(grammarAccess.getTypeReferenceRule()); } 
	 EOF 
;

// Rule TypeReference
ruleTypeReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeReferenceAccess().getPtypeAssignment()); }
		(rule__TypeReference__PtypeAssignment)
		{ after(grammarAccess.getTypeReferenceAccess().getPtypeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimitiveType
entryRulePrimitiveType
:
{ before(grammarAccess.getPrimitiveTypeRule()); }
	 rulePrimitiveType
{ after(grammarAccess.getPrimitiveTypeRule()); } 
	 EOF 
;

// Rule PrimitiveType
rulePrimitiveType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
		(rule__PrimitiveType__Alternatives)
		{ after(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntegerType
entryRuleIntegerType
:
{ before(grammarAccess.getIntegerTypeRule()); }
	 ruleIntegerType
{ after(grammarAccess.getIntegerTypeRule()); } 
	 EOF 
;

// Rule IntegerType
ruleIntegerType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegerTypeAccess().getGroup()); }
		(rule__IntegerType__Group__0)
		{ after(grammarAccess.getIntegerTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanType
entryRuleBooleanType
:
{ before(grammarAccess.getBooleanTypeRule()); }
	 ruleBooleanType
{ after(grammarAccess.getBooleanTypeRule()); } 
	 EOF 
;

// Rule BooleanType
ruleBooleanType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanTypeAccess().getGroup()); }
		(rule__BooleanType__Group__0)
		{ after(grammarAccess.getBooleanTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringType
entryRuleStringType
:
{ before(grammarAccess.getStringTypeRule()); }
	 ruleStringType
{ after(grammarAccess.getStringTypeRule()); } 
	 EOF 
;

// Rule StringType
ruleStringType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringTypeAccess().getGroup()); }
		(rule__StringType__Group__0)
		{ after(grammarAccess.getStringTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRealType
entryRuleRealType
:
{ before(grammarAccess.getRealTypeRule()); }
	 ruleRealType
{ after(grammarAccess.getRealTypeRule()); } 
	 EOF 
;

// Rule RealType
ruleRealType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRealTypeAccess().getGroup()); }
		(rule__RealType__Group__0)
		{ after(grammarAccess.getRealTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); }
		ruleOrExpression
		{ after(grammarAccess.getExpressionAccess().getOrExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpression
entryRuleOrExpression
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
		(rule__OrExpression__Group__0)
		{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAsExpression
entryRuleAsExpression
:
{ before(grammarAccess.getAsExpressionRule()); }
	 ruleAsExpression
{ after(grammarAccess.getAsExpressionRule()); } 
	 EOF 
;

// Rule AsExpression
ruleAsExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAsExpressionAccess().getGroup()); }
		(rule__AsExpression__Group__0)
		{ after(grammarAccess.getAsExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression
:
{ before(grammarAccess.getEqualityExpressionRule()); }
	 ruleEqualityExpression
{ after(grammarAccess.getEqualityExpressionRule()); } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getGroup()); }
		(rule__EqualityExpression__Group__0)
		{ after(grammarAccess.getEqualityExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
		(rule__RelationalExpression__Group__0)
		{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
		(rule__AdditiveExpression__Group__0)
		{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
		(rule__MultiplicativeExpression__Group__0)
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
		(rule__UnaryExpression__Alternatives)
		{ after(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression
:
{ before(grammarAccess.getParenthesizedExpressionRule()); }
	 ruleParenthesizedExpression
{ after(grammarAccess.getParenthesizedExpressionRule()); } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
		(rule__ParenthesizedExpression__Group__0)
		{ after(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression
:
{ before(grammarAccess.getLiteralExpressionRule()); }
	 ruleLiteralExpression
{ after(grammarAccess.getLiteralExpressionRule()); } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
		(rule__LiteralExpression__Alternatives)
		{ after(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getIntegerTypeParserRuleCall_0()); }
		ruleIntegerType
		{ after(grammarAccess.getPrimitiveTypeAccess().getIntegerTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getBooleanTypeParserRuleCall_1()); }
		ruleBooleanType
		{ after(grammarAccess.getPrimitiveTypeAccess().getBooleanTypeParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getStringTypeParserRuleCall_2()); }
		ruleStringType
		{ after(grammarAccess.getPrimitiveTypeAccess().getStringTypeParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getRealTypeParserRuleCall_3()); }
		ruleRealType
		{ after(grammarAccess.getPrimitiveTypeAccess().getRealTypeParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0()); }
		'=='
		{ after(grammarAccess.getEqualityExpressionAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1()); }
		'!='
		{ after(grammarAccess.getEqualityExpressionAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getOpLessThanSignKeyword_1_1_0_0()); }
		'<'
		{ after(grammarAccess.getRelationalExpressionAccess().getOpLessThanSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getOpGreaterThanSignKeyword_1_1_0_1()); }
		'>'
		{ after(grammarAccess.getRelationalExpressionAccess().getOpGreaterThanSignKeyword_1_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_2()); }
		'<='
		{ after(grammarAccess.getRelationalExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_3()); }
		'>='
		{ after(grammarAccess.getRelationalExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getOpPlusSignKeyword_1_1_0_0()); }
		'+'
		{ after(grammarAccess.getAdditiveExpressionAccess().getOpPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getOpHyphenMinusKeyword_1_1_0_1()); }
		'-'
		{ after(grammarAccess.getAdditiveExpressionAccess().getOpHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_1_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_1_1_0_1()); }
		'/'
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
		(rule__UnaryExpression__Group_0__0)
		{ after(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getGroup_1()); }
		(rule__UnaryExpression__Group_1__0)
		{ after(grammarAccess.getUnaryExpressionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getGroup_2()); }
		(rule__UnaryExpression__Group_2__0)
		{ after(grammarAccess.getUnaryExpressionAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_3()); }
		rulePrimaryExpression
		{ after(grammarAccess.getUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_0()); }
		ruleParenthesizedExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralExpressionParserRuleCall_1()); }
		ruleLiteralExpression
		{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getGroup_0()); }
		(rule__LiteralExpression__Group_0__0)
		{ after(grammarAccess.getLiteralExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getGroup_1()); }
		(rule__LiteralExpression__Group_1__0)
		{ after(grammarAccess.getLiteralExpressionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getGroup_2()); }
		(rule__LiteralExpression__Group_2__0)
		{ after(grammarAccess.getLiteralExpressionAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Alternatives_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getFalseKeyword_2_1_0()); }
		'false'
		{ after(grammarAccess.getLiteralExpressionAccess().getFalseKeyword_2_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getIsTrueAssignment_2_1_1()); }
		(rule__LiteralExpression__IsTrueAssignment_2_1_1)
		{ after(grammarAccess.getLiteralExpressionAccess().getIsTrueAssignment_2_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getDefineKeyword_0()); }
	'Define'
	{ after(grammarAccess.getRuleAccess().getDefineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getComplexEventParserRuleCall_1()); }
	ruleComplexEvent
	{ after(grammarAccess.getRuleAccess().getComplexEventParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getFromKeyword_2()); }
	'From'
	{ after(grammarAccess.getRuleAccess().getFromKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getPatternAssignment_3()); }
	(rule__Rule__PatternAssignment_3)
	{ after(grammarAccess.getRuleAccess().getPatternAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__4__Impl
	rule__Rule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getWhereKeyword_4()); }
	'Where'
	{ after(grammarAccess.getRuleAccess().getWhereKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__5__Impl
	rule__Rule__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getConditionExpressionAssignment_5()); }
	(rule__Rule__ConditionExpressionAssignment_5)
	{ after(grammarAccess.getRuleAccess().getConditionExpressionAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getSemicolonKeyword_6()); }
	';'
	{ after(grammarAccess.getRuleAccess().getSemicolonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexEvent__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexEvent__Group__0__Impl
	rule__ComplexEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexEventAccess().getNameAssignment_0()); }
	(rule__ComplexEvent__NameAssignment_0)
	{ after(grammarAccess.getComplexEventAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexEvent__Group__1__Impl
	rule__ComplexEvent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexEventAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getComplexEventAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexEvent__Group__2__Impl
	rule__ComplexEvent__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexEventAccess().getGroup_2()); }
	(rule__ComplexEvent__Group_2__0)?
	{ after(grammarAccess.getComplexEventAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexEvent__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexEventAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getComplexEventAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexEvent__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexEvent__Group_2__0__Impl
	rule__ComplexEvent__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexEventAccess().getParamsAssignment_2_0()); }
	(rule__ComplexEvent__ParamsAssignment_2_0)
	{ after(grammarAccess.getComplexEventAccess().getParamsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexEvent__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexEventAccess().getGroup_2_1()); }
	(rule__ComplexEvent__Group_2_1__0)*
	{ after(grammarAccess.getComplexEventAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ComplexEvent__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexEvent__Group_2_1__0__Impl
	rule__ComplexEvent__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexEventAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getComplexEventAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ComplexEvent__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComplexEventAccess().getParamsAssignment_2_1_1()); }
	(rule__ComplexEvent__ParamsAssignment_2_1_1)
	{ after(grammarAccess.getComplexEventAccess().getParamsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CEParameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CEParameter__Group__0__Impl
	rule__CEParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CEParameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCEParameterAccess().getNameAssignment_0()); }
	(rule__CEParameter__NameAssignment_0)
	{ after(grammarAccess.getCEParameterAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CEParameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CEParameter__Group__1__Impl
	rule__CEParameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CEParameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCEParameterAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getCEParameterAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CEParameter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CEParameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CEParameter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCEParameterAccess().getTypeAssignment_2()); }
	(rule__CEParameter__TypeAssignment_2)
	{ after(grammarAccess.getCEParameterAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegerType__Group__0__Impl
	rule__IntegerType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerTypeAccess().getIntegerTypeAction_0()); }
	()
	{ after(grammarAccess.getIntegerTypeAccess().getIntegerTypeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntegerType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerTypeAccess().getNameAssignment_1()); }
	(rule__IntegerType__NameAssignment_1)
	{ after(grammarAccess.getIntegerTypeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanType__Group__0__Impl
	rule__BooleanType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0()); }
	()
	{ after(grammarAccess.getBooleanTypeAccess().getBooleanTypeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanTypeAccess().getNameAssignment_1()); }
	(rule__BooleanType__NameAssignment_1)
	{ after(grammarAccess.getBooleanTypeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringType__Group__0__Impl
	rule__StringType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringTypeAccess().getStringTypeAction_0()); }
	()
	{ after(grammarAccess.getStringTypeAccess().getStringTypeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringTypeAccess().getNameAssignment_1()); }
	(rule__StringType__NameAssignment_1)
	{ after(grammarAccess.getStringTypeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RealType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RealType__Group__0__Impl
	rule__RealType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RealType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealTypeAccess().getRealTypeAction_0()); }
	()
	{ after(grammarAccess.getRealTypeAccess().getRealTypeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RealType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RealType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRealTypeAccess().getNameAssignment_1()); }
	(rule__RealType__NameAssignment_1)
	{ after(grammarAccess.getRealTypeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
	{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
	(rule__OrExpression__Group_1__0)*
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOrExpressionLhsAction_1_0()); }
	()
	{ after(grammarAccess.getOrExpressionAccess().getOrExpressionLhsAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOpAssignment_1_1()); }
	(rule__OrExpression__OpAssignment_1_1)
	{ after(grammarAccess.getOrExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getRhsAssignment_1_2()); }
	(rule__OrExpression__RhsAssignment_1_2)
	{ after(grammarAccess.getOrExpressionAccess().getRhsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAsExpressionParserRuleCall_0()); }
	ruleAsExpression
	{ after(grammarAccess.getAndExpressionAccess().getAsExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLhsAction_1_0()); }
	()
	{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLhsAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getOpAssignment_1_1()); }
	(rule__AndExpression__OpAssignment_1_1)
	{ after(grammarAccess.getAndExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getRhsAssignment_1_2()); }
	(rule__AndExpression__RhsAssignment_1_2)
	{ after(grammarAccess.getAndExpressionAccess().getRhsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AsExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsExpression__Group__0__Impl
	rule__AsExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AsExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
	ruleEqualityExpression
	{ after(grammarAccess.getAsExpressionAccess().getEqualityExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AsExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsExpressionAccess().getGroup_1()); }
	(rule__AsExpression__Group_1__0)*
	{ after(grammarAccess.getAsExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AsExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsExpression__Group_1__0__Impl
	rule__AsExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AsExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsExpressionAccess().getAsExpressionLhsAction_1_0()); }
	()
	{ after(grammarAccess.getAsExpressionAccess().getAsExpressionLhsAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsExpression__Group_1__1__Impl
	rule__AsExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AsExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsExpressionAccess().getOpAssignment_1_1()); }
	(rule__AsExpression__OpAssignment_1_1)
	{ after(grammarAccess.getAsExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AsExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AsExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAsExpressionAccess().getNameofasAssignment_1_2()); }
	(rule__AsExpression__NameofasAssignment_1_2)
	{ after(grammarAccess.getAsExpressionAccess().getNameofasAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group__0__Impl
	rule__EqualityExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
	ruleRelationalExpression
	{ after(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
	(rule__EqualityExpression__Group_1__0)*
	{ after(grammarAccess.getEqualityExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EqualityExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group_1__0__Impl
	rule__EqualityExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0()); }
	()
	{ after(grammarAccess.getEqualityExpressionAccess().getEqualityExpressionLhsAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group_1__1__Impl
	rule__EqualityExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getOpAssignment_1_1()); }
	(rule__EqualityExpression__OpAssignment_1_1)
	{ after(grammarAccess.getEqualityExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EqualityExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_2()); }
	(rule__EqualityExpression__RhsAssignment_1_2)
	{ after(grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleAdditiveExpression
	{ after(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
	(rule__RelationalExpression__Group_1__0)*
	{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getComparativeExpressionLhsAction_1_0()); }
	()
	{ after(grammarAccess.getRelationalExpressionAccess().getComparativeExpressionLhsAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group_1__1__Impl
	rule__RelationalExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_1()); }
	(rule__RelationalExpression__OpAssignment_1_1)
	{ after(grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_2()); }
	(rule__RelationalExpression__RhsAssignment_1_2)
	{ after(grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
	{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
	(rule__AdditiveExpression__Group_1__0)*
	{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLhsAction_1_0()); }
	()
	{ after(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpressionLhsAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__1__Impl
	rule__AdditiveExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_1()); }
	(rule__AdditiveExpression__OpAssignment_1_1)
	{ after(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditiveExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_2()); }
	(rule__AdditiveExpression__RhsAssignment_1_2)
	{ after(grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
	ruleUnaryExpression
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
	(rule__MultiplicativeExpression__Group_1__0)*
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLhsAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpressionLhsAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__1__Impl
	rule__MultiplicativeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1()); }
	(rule__MultiplicativeExpression__OpAssignment_1_1)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_2()); }
	(rule__MultiplicativeExpression__RhsAssignment_1_2)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_0__0__Impl
	rule__UnaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getNotExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getUnaryExpressionAccess().getNotExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_0__1__Impl
	rule__UnaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0_1()); }
	(rule__UnaryExpression__OpAssignment_0_1)
	{ after(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_0_2()); }
	(rule__UnaryExpression__OperandAssignment_0_2)
	{ after(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_1__0__Impl
	rule__UnaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getPlusExpressionAction_1_0()); }
	()
	{ after(grammarAccess.getUnaryExpressionAccess().getPlusExpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_1__1__Impl
	rule__UnaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getOpAssignment_1_1()); }
	(rule__UnaryExpression__OpAssignment_1_1)
	{ after(grammarAccess.getUnaryExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_1_2()); }
	(rule__UnaryExpression__OperandAssignment_1_2)
	{ after(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_2__0__Impl
	rule__UnaryExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getMinusExpressionAction_2_0()); }
	()
	{ after(grammarAccess.getUnaryExpressionAccess().getMinusExpressionAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_2__1__Impl
	rule__UnaryExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getOpAssignment_2_1()); }
	(rule__UnaryExpression__OpAssignment_2_1)
	{ after(grammarAccess.getUnaryExpressionAccess().getOpAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_2_2()); }
	(rule__UnaryExpression__OperandAssignment_2_2)
	{ after(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedExpression__Group__0__Impl
	rule__ParenthesizedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedExpression__Group__1__Impl
	rule__ParenthesizedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1()); }
	ruleExpression
	{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParenthesizedExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralExpression__Group_0__0__Impl
	rule__LiteralExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralExpressionAccess().getIntegerLiteralAction_0_0()); }
	()
	{ after(grammarAccess.getLiteralExpressionAccess().getIntegerLiteralAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralExpressionAccess().getValueAssignment_0_1()); }
	(rule__LiteralExpression__ValueAssignment_0_1)
	{ after(grammarAccess.getLiteralExpressionAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralExpression__Group_1__0__Impl
	rule__LiteralExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralExpressionAccess().getStringLiteralAction_1_0()); }
	()
	{ after(grammarAccess.getLiteralExpressionAccess().getStringLiteralAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralExpressionAccess().getValueAssignment_1_1()); }
	(rule__LiteralExpression__ValueAssignment_1_1)
	{ after(grammarAccess.getLiteralExpressionAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralExpression__Group_2__0__Impl
	rule__LiteralExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralExpressionAccess().getBooleanLiteralAction_2_0()); }
	()
	{ after(grammarAccess.getLiteralExpressionAccess().getBooleanLiteralAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralExpressionAccess().getAlternatives_2_1()); }
	(rule__LiteralExpression__Alternatives_2_1)
	{ after(grammarAccess.getLiteralExpressionAccess().getAlternatives_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__RuleAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getRuleRuleParserRuleCall_0()); }
		ruleRule
		{ after(grammarAccess.getModelAccess().getRuleRuleParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__PatternAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getPatternExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getRuleAccess().getPatternExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ConditionExpressionAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getConditionExpressionIDTerminalRuleCall_5_0()); }
		RULE_ID
		{ after(grammarAccess.getRuleAccess().getConditionExpressionIDTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplexEventAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getComplexEventAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__ParamsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplexEventAccess().getParamsCEParameterParserRuleCall_2_0_0()); }
		ruleCEParameter
		{ after(grammarAccess.getComplexEventAccess().getParamsCEParameterParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ComplexEvent__ParamsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComplexEventAccess().getParamsCEParameterParserRuleCall_2_1_1_0()); }
		ruleCEParameter
		{ after(grammarAccess.getComplexEventAccess().getParamsCEParameterParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CEParameter__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCEParameterAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getCEParameterAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CEParameter__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCEParameterAccess().getTypeTypeReferenceParserRuleCall_2_0()); }
		ruleTypeReference
		{ after(grammarAccess.getCEParameterAccess().getTypeTypeReferenceParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeReference__PtypeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeReferenceAccess().getPtypePrimitiveTypeParserRuleCall_0()); }
		rulePrimitiveType
		{ after(grammarAccess.getTypeReferenceAccess().getPtypePrimitiveTypeParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerType__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerTypeAccess().getNameIntegerKeyword_1_0()); }
		(
			{ before(grammarAccess.getIntegerTypeAccess().getNameIntegerKeyword_1_0()); }
			'integer'
			{ after(grammarAccess.getIntegerTypeAccess().getNameIntegerKeyword_1_0()); }
		)
		{ after(grammarAccess.getIntegerTypeAccess().getNameIntegerKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanType__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanTypeAccess().getNameBooleanKeyword_1_0()); }
		(
			{ before(grammarAccess.getBooleanTypeAccess().getNameBooleanKeyword_1_0()); }
			'boolean'
			{ after(grammarAccess.getBooleanTypeAccess().getNameBooleanKeyword_1_0()); }
		)
		{ after(grammarAccess.getBooleanTypeAccess().getNameBooleanKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringType__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringTypeAccess().getNameStringKeyword_1_0()); }
		(
			{ before(grammarAccess.getStringTypeAccess().getNameStringKeyword_1_0()); }
			'string'
			{ after(grammarAccess.getStringTypeAccess().getNameStringKeyword_1_0()); }
		)
		{ after(grammarAccess.getStringTypeAccess().getNameStringKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealType__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealTypeAccess().getNameRealKeyword_1_0()); }
		(
			{ before(grammarAccess.getRealTypeAccess().getNameRealKeyword_1_0()); }
			'real'
			{ after(grammarAccess.getRealTypeAccess().getNameRealKeyword_1_0()); }
		)
		{ after(grammarAccess.getRealTypeAccess().getNameRealKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getOpOrKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getOrExpressionAccess().getOpOrKeyword_1_1_0()); }
			'or'
			{ after(grammarAccess.getOrExpressionAccess().getOpOrKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getOrExpressionAccess().getOpOrKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RhsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getRhsAndExpressionParserRuleCall_1_2_0()); }
		ruleAndExpression
		{ after(grammarAccess.getOrExpressionAccess().getRhsAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getOpAndKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getAndExpressionAccess().getOpAndKeyword_1_1_0()); }
			'and'
			{ after(grammarAccess.getAndExpressionAccess().getOpAndKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getAndExpressionAccess().getOpAndKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RhsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getRhsAsExpressionParserRuleCall_1_2_0()); }
		ruleAsExpression
		{ after(grammarAccess.getAndExpressionAccess().getRhsAsExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAsExpressionAccess().getOpAsKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getAsExpressionAccess().getOpAsKeyword_1_1_0()); }
			'as'
			{ after(grammarAccess.getAsExpressionAccess().getOpAsKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getAsExpressionAccess().getOpAsKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AsExpression__NameofasAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAsExpressionAccess().getNameofasIDTerminalRuleCall_1_2_0()); }
		RULE_ID
		{ after(grammarAccess.getAsExpressionAccess().getNameofasIDTerminalRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getOpAlternatives_1_1_0()); }
		(rule__EqualityExpression__OpAlternatives_1_1_0)
		{ after(grammarAccess.getEqualityExpressionAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualityExpression__RhsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_2_0()); }
		ruleRelationalExpression
		{ after(grammarAccess.getEqualityExpressionAccess().getRhsRelationalExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getOpAlternatives_1_1_0()); }
		(rule__RelationalExpression__OpAlternatives_1_1_0)
		{ after(grammarAccess.getRelationalExpressionAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RhsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalExpressionAccess().getRhsAdditiveExpressionParserRuleCall_1_2_0()); }
		ruleAdditiveExpression
		{ after(grammarAccess.getRelationalExpressionAccess().getRhsAdditiveExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getOpAlternatives_1_1_0()); }
		(rule__AdditiveExpression__OpAlternatives_1_1_0)
		{ after(grammarAccess.getAdditiveExpressionAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RhsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditiveExpressionAccess().getRhsMultiplicativeExpressionParserRuleCall_1_2_0()); }
		ruleMultiplicativeExpression
		{ after(grammarAccess.getAdditiveExpressionAccess().getRhsMultiplicativeExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAlternatives_1_1_0()); }
		(rule__MultiplicativeExpression__OpAlternatives_1_1_0)
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RhsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getRhsUnaryExpressionParserRuleCall_1_2_0()); }
		ruleUnaryExpression
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getRhsUnaryExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOpNotKeyword_0_1_0()); }
		(
			{ before(grammarAccess.getUnaryExpressionAccess().getOpNotKeyword_0_1_0()); }
			'not'
			{ after(grammarAccess.getUnaryExpressionAccess().getOpNotKeyword_0_1_0()); }
		)
		{ after(grammarAccess.getUnaryExpressionAccess().getOpNotKeyword_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OperandAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOperandUnaryExpressionParserRuleCall_0_2_0()); }
		ruleUnaryExpression
		{ after(grammarAccess.getUnaryExpressionAccess().getOperandUnaryExpressionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOpPlusSignKeyword_1_1_0()); }
		(
			{ before(grammarAccess.getUnaryExpressionAccess().getOpPlusSignKeyword_1_1_0()); }
			'+'
			{ after(grammarAccess.getUnaryExpressionAccess().getOpPlusSignKeyword_1_1_0()); }
		)
		{ after(grammarAccess.getUnaryExpressionAccess().getOpPlusSignKeyword_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OperandAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOperandUnaryExpressionParserRuleCall_1_2_0()); }
		ruleUnaryExpression
		{ after(grammarAccess.getUnaryExpressionAccess().getOperandUnaryExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_2_1_0()); }
		(
			{ before(grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_2_1_0()); }
			'-'
			{ after(grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_2_1_0()); }
		)
		{ after(grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OperandAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOperandUnaryExpressionParserRuleCall_2_2_0()); }
		ruleUnaryExpression
		{ after(grammarAccess.getUnaryExpressionAccess().getOperandUnaryExpressionParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getValueINTTerminalRuleCall_0_1_0()); }
		RULE_INT
		{ after(grammarAccess.getLiteralExpressionAccess().getValueINTTerminalRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getLiteralExpressionAccess().getValueSTRINGTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__IsTrueAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getIsTrueTrueKeyword_2_1_1_0()); }
		(
			{ before(grammarAccess.getLiteralExpressionAccess().getIsTrueTrueKeyword_2_1_1_0()); }
			'true'
			{ after(grammarAccess.getLiteralExpressionAccess().getIsTrueTrueKeyword_2_1_1_0()); }
		)
		{ after(grammarAccess.getLiteralExpressionAccess().getIsTrueTrueKeyword_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
