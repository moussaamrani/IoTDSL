/*
 * generated by Xtext 2.10.0
 */
package be.unamur.iotdsl.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class IoTDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class IoTModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.IoTModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIoTModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		
		//IoTModel:
		//	{IoTModel} types+=Type*
		//	//	(configuration+=NetworkConfiguration)* 
		//	//	(rules+=Rule)* 
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{IoTModel} types+=Type*
		public Group getGroup() { return cGroup; }
		
		//{IoTModel}
		public Action getIoTModelAction_0() { return cIoTModelAction_0; }
		
		//types+=Type*
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_1_0() { return cTypesTypeParserRuleCall_1_0; }
	}
	public class NamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.NamedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerationLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNamedTypedElementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//NamedElement:
		//	Type | EnumerationLiteral | NamedTypedElement;
		@Override public ParserRule getRule() { return rule; }
		
		//Type | EnumerationLiteral | NamedTypedElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }
		
		//EnumerationLiteral
		public RuleCall getEnumerationLiteralParserRuleCall_1() { return cEnumerationLiteralParserRuleCall_1; }
		
		//NamedTypedElement
		public RuleCall getNamedTypedElementParserRuleCall_2() { return cNamedTypedElementParserRuleCall_2; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclaredTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	DeclaredType | PrimitiveType;
		@Override public ParserRule getRule() { return rule; }
		
		//DeclaredType | PrimitiveType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DeclaredType
		public RuleCall getDeclaredTypeParserRuleCall_0() { return cDeclaredTypeParserRuleCall_0; }
		
		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_1() { return cPrimitiveTypeParserRuleCall_1; }
	}
	public class DeclaredTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.DeclaredType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DeclaredType:
		//	Node | Enumeration;
		@Override public ParserRule getRule() { return rule; }
		
		//Node | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Node
		public RuleCall getNodeParserRuleCall_0() { return cNodeParserRuleCall_0; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_1() { return cEnumerationParserRuleCall_1; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cLiteralsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLiteralsEnumerationLiteralParserRuleCall_3_0_0 = (RuleCall)cLiteralsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Enumeration:
		//	'enumeration' name=ValidID '{' (literals+=EnumerationLiteral ';')*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'enumeration' name=ValidID '{' (literals+=EnumerationLiteral ';')* '}'
		public Group getGroup() { return cGroup; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(literals+=EnumerationLiteral ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//literals+=EnumerationLiteral
		public Assignment getLiteralsAssignment_3_0() { return cLiteralsAssignment_3_0; }
		
		//EnumerationLiteral
		public RuleCall getLiteralsEnumerationLiteralParserRuleCall_3_0_0() { return cLiteralsEnumerationLiteralParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EnumerationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.EnumerationLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EnumerationLiteral:
		//	{EnumerationLiteral} name=ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		//{EnumerationLiteral} name=ValidID
		public Group getGroup() { return cGroup; }
		
		//{EnumerationLiteral}
		public Action getEnumerationLiteralAction_0() { return cEnumerationLiteralAction_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
	}
	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRealTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//PrimitiveType:
		//	IntegerType | BooleanType | StringType | RealType;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerType | BooleanType | StringType | RealType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_0() { return cIntegerTypeParserRuleCall_0; }
		
		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_1() { return cBooleanTypeParserRuleCall_1; }
		
		//StringType
		public RuleCall getStringTypeParserRuleCall_2() { return cStringTypeParserRuleCall_2; }
		
		//RealType
		public RuleCall getRealTypeParserRuleCall_3() { return cRealTypeParserRuleCall_3; }
	}
	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.IntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameIntegerKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		
		//IntegerType:
		//	{IntegerType} name="integer";
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerType} name="integer"
		public Group getGroup() { return cGroup; }
		
		//{IntegerType}
		public Action getIntegerTypeAction_0() { return cIntegerTypeAction_0; }
		
		//name="integer"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//"integer"
		public Keyword getNameIntegerKeyword_1_0() { return cNameIntegerKeyword_1_0; }
	}
	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.BooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameBooleanKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		
		//BooleanType:
		//	{BooleanType} name="boolean";
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanType} name="boolean"
		public Group getGroup() { return cGroup; }
		
		//{BooleanType}
		public Action getBooleanTypeAction_0() { return cBooleanTypeAction_0; }
		
		//name="boolean"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//"boolean"
		public Keyword getNameBooleanKeyword_1_0() { return cNameBooleanKeyword_1_0; }
	}
	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameStringKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		
		//StringType:
		//	{StringType} name="string";
		@Override public ParserRule getRule() { return rule; }
		
		//{StringType} name="string"
		public Group getGroup() { return cGroup; }
		
		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }
		
		//name="string"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//"string"
		public Keyword getNameStringKeyword_1_0() { return cNameStringKeyword_1_0; }
	}
	public class RealTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.RealType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRealTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameRealKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		
		//RealType:
		//	{RealType} name="real";
		@Override public ParserRule getRule() { return rule; }
		
		//{RealType} name="real"
		public Group getGroup() { return cGroup; }
		
		//{RealType}
		public Action getRealTypeAction_0() { return cRealTypeAction_0; }
		
		//name="real"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//"real"
		public Keyword getNameRealKeyword_1_0() { return cNameRealKeyword_1_0; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGatewayParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeviceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Node:
		//	Gateway | Device;
		@Override public ParserRule getRule() { return rule; }
		
		//Gateway | Device
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Gateway
		public RuleCall getGatewayParserRuleCall_0() { return cGatewayParserRuleCall_0; }
		
		//Device
		public RuleCall getDeviceParserRuleCall_1() { return cDeviceParserRuleCall_1; }
	}
	public class GatewayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.Gateway");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGatewayAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cGatewayKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cMiddlewareKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Gateway:
		//	{Gateway} ('gateway' | 'middleware') name=ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Gateway} ('gateway' | 'middleware') name=ValidID
		public Group getGroup() { return cGroup; }
		
		//{Gateway}
		public Action getGatewayAction_0() { return cGatewayAction_0; }
		
		//('gateway' | 'middleware')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'gateway'
		public Keyword getGatewayKeyword_1_0() { return cGatewayKeyword_1_0; }
		
		//'middleware'
		public Keyword getMiddlewareKeyword_1_1() { return cMiddlewareKeyword_1_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
	}
	public class DeviceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.Device");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeviceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDeviceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Device:
		//	{Device} 'device' name=ValidID '{' features+=Feature* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Device} 'device' name=ValidID '{' features+=Feature* '}'
		public Group getGroup() { return cGroup; }
		
		//{Device}
		public Action getDeviceAction_0() { return cDeviceAction_0; }
		
		//'device'
		public Keyword getDeviceKeyword_1() { return cDeviceKeyword_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//features+=Feature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_4_0() { return cFeaturesFeatureParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class NamedTypedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.NamedTypedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NamedTypedElement:
		//	Property | Parameter;
		@Override public ParserRule getRule() { return rule; }
		
		//Property | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Property
		public RuleCall getPropertyParserRuleCall_0() { return cPropertyParserRuleCall_0; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Feature:
		//	Property | Event;
		@Override public ParserRule getRule() { return rule; }
		
		//Property | Event
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Property
		public RuleCall getPropertyParserRuleCall_0() { return cPropertyParserRuleCall_0; }
		
		//Event
		public RuleCall getEventParserRuleCall_1() { return cEventParserRuleCall_1; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeReferenceParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Property:
		//	'property' name=ValidID ':' type=TypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//'property' name=ValidID ':' type=TypeReference
		public Group getGroup() { return cGroup; }
		
		//'property'
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=TypeReference
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_3_0() { return cTypeTypeReferenceParserRuleCall_3_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindEventTypeEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cParametersAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_2_1_0_0 = (RuleCall)cParametersAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_1_1_1_0 = (RuleCall)cParametersAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Event:
		//	kind=EventType name=ValidID ('(' (parameters+=Parameter (',' parameters+=Parameter)*)?
		//	')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//kind=EventType name=ValidID ('(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')')?
		public Group getGroup() { return cGroup; }
		
		//kind=EventType
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//EventType
		public RuleCall getKindEventTypeEnumRuleCall_0_0() { return cKindEventTypeEnumRuleCall_0_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//('(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//(parameters+=Parameter (',' parameters+=Parameter)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1_0() { return cParametersAssignment_2_1_0; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_0_0() { return cParametersParameterParserRuleCall_2_1_0_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_2_1_1_1() { return cParametersAssignment_2_1_1_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_1_1_1_0() { return cParametersParameterParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeReferenceParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Parameter:
		//	name=ValidID ':' type=TypeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValidID ':' type=TypeReference
		public Group getGroup() { return cGroup; }
		
		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=TypeReference
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//TypeReference
		public RuleCall getTypeTypeReferenceParserRuleCall_2_0() { return cTypeTypeReferenceParserRuleCall_2_0; }
	}
	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.TypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPtypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPtypePrimitiveTypeParserRuleCall_0_0 = (RuleCall)cPtypeAssignment_0.eContents().get(0);
		private final Assignment cDtypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cDtypeDeclaredTypeCrossReference_1_0 = (CrossReference)cDtypeAssignment_1.eContents().get(0);
		private final RuleCall cDtypeDeclaredTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cDtypeDeclaredTypeCrossReference_1_0.eContents().get(1);
		
		//TypeReference:
		//	ptype=PrimitiveType | dtype=[DeclaredType|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//ptype=PrimitiveType | dtype=[DeclaredType|QualifiedName]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ptype=PrimitiveType
		public Assignment getPtypeAssignment_0() { return cPtypeAssignment_0; }
		
		//PrimitiveType
		public RuleCall getPtypePrimitiveTypeParserRuleCall_0_0() { return cPtypePrimitiveTypeParserRuleCall_0_0; }
		
		//dtype=[DeclaredType|QualifiedName]
		public Assignment getDtypeAssignment_1() { return cDtypeAssignment_1; }
		
		//[DeclaredType|QualifiedName]
		public CrossReference getDtypeDeclaredTypeCrossReference_1_0() { return cDtypeDeclaredTypeCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getDtypeDeclaredTypeQualifiedNameParserRuleCall_1_0_1() { return cDtypeDeclaredTypeQualifiedNameParserRuleCall_1_0_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ValidID (=> '.' ValidID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ValidID (=> '.' ValidID)*
		public Group getGroup() { return cGroup; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }
		
		//(=> '.' ValidID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> '.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}
	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.ValidID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValidID:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	public class EventTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "be.unamur.iotdsl.xtext.IoTDSL.EventType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSENSINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSENSINGSensingKeyword_0_0 = (Keyword)cSENSINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cACTUATINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cACTUATINGActuatingKeyword_1_0 = (Keyword)cACTUATINGEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EventType:
		//	SENSING='sensing' | ACTUATING='actuating';
		public EnumRule getRule() { return rule; }
		
		//SENSING='sensing' | ACTUATING='actuating'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SENSING='sensing'
		public EnumLiteralDeclaration getSENSINGEnumLiteralDeclaration_0() { return cSENSINGEnumLiteralDeclaration_0; }
		
		//'sensing'
		public Keyword getSENSINGSensingKeyword_0_0() { return cSENSINGSensingKeyword_0_0; }
		
		//ACTUATING='actuating'
		public EnumLiteralDeclaration getACTUATINGEnumLiteralDeclaration_1() { return cACTUATINGEnumLiteralDeclaration_1; }
		
		//'actuating'
		public Keyword getACTUATINGActuatingKeyword_1_0() { return cACTUATINGActuatingKeyword_1_0; }
	}
	
	private final IoTModelElements pIoTModel;
	private final NamedElementElements pNamedElement;
	private final TypeElements pType;
	private final DeclaredTypeElements pDeclaredType;
	private final EnumerationElements pEnumeration;
	private final EnumerationLiteralElements pEnumerationLiteral;
	private final PrimitiveTypeElements pPrimitiveType;
	private final IntegerTypeElements pIntegerType;
	private final BooleanTypeElements pBooleanType;
	private final StringTypeElements pStringType;
	private final RealTypeElements pRealType;
	private final NodeElements pNode;
	private final GatewayElements pGateway;
	private final DeviceElements pDevice;
	private final NamedTypedElementElements pNamedTypedElement;
	private final FeatureElements pFeature;
	private final PropertyElements pProperty;
	private final EventElements pEvent;
	private final EventTypeElements eEventType;
	private final ParameterElements pParameter;
	private final TypeReferenceElements pTypeReference;
	private final QualifiedNameElements pQualifiedName;
	private final ValidIDElements pValidID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IoTDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pIoTModel = new IoTModelElements();
		this.pNamedElement = new NamedElementElements();
		this.pType = new TypeElements();
		this.pDeclaredType = new DeclaredTypeElements();
		this.pEnumeration = new EnumerationElements();
		this.pEnumerationLiteral = new EnumerationLiteralElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pBooleanType = new BooleanTypeElements();
		this.pStringType = new StringTypeElements();
		this.pRealType = new RealTypeElements();
		this.pNode = new NodeElements();
		this.pGateway = new GatewayElements();
		this.pDevice = new DeviceElements();
		this.pNamedTypedElement = new NamedTypedElementElements();
		this.pFeature = new FeatureElements();
		this.pProperty = new PropertyElements();
		this.pEvent = new EventElements();
		this.eEventType = new EventTypeElements();
		this.pParameter = new ParameterElements();
		this.pTypeReference = new TypeReferenceElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pValidID = new ValidIDElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("be.unamur.iotdsl.xtext.IoTDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//IoTModel:
	//	{IoTModel} types+=Type*
	//	//	(configuration+=NetworkConfiguration)* 
	//	//	(rules+=Rule)* 
	//;
	public IoTModelElements getIoTModelAccess() {
		return pIoTModel;
	}
	
	public ParserRule getIoTModelRule() {
		return getIoTModelAccess().getRule();
	}
	
	//NamedElement:
	//	Type | EnumerationLiteral | NamedTypedElement;
	public NamedElementElements getNamedElementAccess() {
		return pNamedElement;
	}
	
	public ParserRule getNamedElementRule() {
		return getNamedElementAccess().getRule();
	}
	
	//Type:
	//	DeclaredType | PrimitiveType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//DeclaredType:
	//	Node | Enumeration;
	public DeclaredTypeElements getDeclaredTypeAccess() {
		return pDeclaredType;
	}
	
	public ParserRule getDeclaredTypeRule() {
		return getDeclaredTypeAccess().getRule();
	}
	
	//Enumeration:
	//	'enumeration' name=ValidID '{' (literals+=EnumerationLiteral ';')*
	//	'}';
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	//EnumerationLiteral:
	//	{EnumerationLiteral} name=ValidID;
	public EnumerationLiteralElements getEnumerationLiteralAccess() {
		return pEnumerationLiteral;
	}
	
	public ParserRule getEnumerationLiteralRule() {
		return getEnumerationLiteralAccess().getRule();
	}
	
	//PrimitiveType:
	//	IntegerType | BooleanType | StringType | RealType;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	//IntegerType:
	//	{IntegerType} name="integer";
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}
	
	//BooleanType:
	//	{BooleanType} name="boolean";
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}
	
	//StringType:
	//	{StringType} name="string";
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}
	
	//RealType:
	//	{RealType} name="real";
	public RealTypeElements getRealTypeAccess() {
		return pRealType;
	}
	
	public ParserRule getRealTypeRule() {
		return getRealTypeAccess().getRule();
	}
	
	//Node:
	//	Gateway | Device;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//Gateway:
	//	{Gateway} ('gateway' | 'middleware') name=ValidID;
	public GatewayElements getGatewayAccess() {
		return pGateway;
	}
	
	public ParserRule getGatewayRule() {
		return getGatewayAccess().getRule();
	}
	
	//Device:
	//	{Device} 'device' name=ValidID '{' features+=Feature* '}';
	public DeviceElements getDeviceAccess() {
		return pDevice;
	}
	
	public ParserRule getDeviceRule() {
		return getDeviceAccess().getRule();
	}
	
	//NamedTypedElement:
	//	Property | Parameter;
	public NamedTypedElementElements getNamedTypedElementAccess() {
		return pNamedTypedElement;
	}
	
	public ParserRule getNamedTypedElementRule() {
		return getNamedTypedElementAccess().getRule();
	}
	
	//Feature:
	//	Property | Event;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//Property:
	//	'property' name=ValidID ':' type=TypeReference;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//Event:
	//	kind=EventType name=ValidID ('(' (parameters+=Parameter (',' parameters+=Parameter)*)?
	//	')')?;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//enum EventType:
	//	SENSING='sensing' | ACTUATING='actuating';
	public EventTypeElements getEventTypeAccess() {
		return eEventType;
	}
	
	public EnumRule getEventTypeRule() {
		return getEventTypeAccess().getRule();
	}
	
	//Parameter:
	//	name=ValidID ':' type=TypeReference;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//TypeReference:
	//	ptype=PrimitiveType | dtype=[DeclaredType|QualifiedName];
	public TypeReferenceElements getTypeReferenceAccess() {
		return pTypeReference;
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public ValidIDElements getValidIDAccess() {
		return pValidID;
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
