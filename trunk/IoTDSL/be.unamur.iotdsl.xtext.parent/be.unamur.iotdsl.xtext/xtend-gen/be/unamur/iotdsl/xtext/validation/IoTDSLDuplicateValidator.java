/**
 * generated by Xtext
 */
package be.unamur.iotdsl.xtext.validation;

import be.unamur.iotdsl.xtext.util.IoTDSLUtil;
import be.unamur.iotdsl.xtext.validation.AbstractIoTDSLValidator;
import com.google.common.base.Objects;
import com.google.common.collect.HashMultimap;
import iotdsl.Device;
import iotdsl.IoTDSLPackage;
import iotdsl.IoTModel;
import iotdsl.NamedElement;
import java.util.Collection;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class IoTDSLDuplicateValidator extends AbstractIoTDSLValidator {
  public final static String DUPLICATE_NAME = "DUPLICATE_NAME";
  
  @Check
  public void checkNoDuplicateDevices(final Device device) {
    IoTModel _containingMetamodel = IoTDSLUtil.containingMetamodel(device);
    Iterable<Device> _devices = IoTDSLUtil.devices(_containingMetamodel);
    final Function1<Device, Boolean> _function = (Device it) -> {
      return Boolean.valueOf(((!Objects.equal(it, device)) && Objects.equal(it.getName(), device.getName())));
    };
    boolean _exists = IterableExtensions.<Device>exists(_devices, _function);
    if (_exists) {
      String _name = device.getName();
      String _plus = ("Duplicate device \'" + _name);
      String _plus_1 = (_plus + "\'");
      EAttribute _namedElement_Name = IoTDSLPackage.eINSTANCE.getNamedElement_Name();
      this.error(_plus_1, _namedElement_Name, 
        IoTDSLDuplicateValidator.DUPLICATE_NAME);
    }
  }
  
  private void checkNoDuplicateElements(final Iterable<? extends NamedElement> elements, final String desc) {
    final HashMultimap<String, NamedElement> multiMap = HashMultimap.<String, NamedElement>create();
    for (final NamedElement e : elements) {
      String _name = e.getName();
      multiMap.put(_name, e);
    }
    Map<String, Collection<NamedElement>> _asMap = multiMap.asMap();
    Set<Map.Entry<String, Collection<NamedElement>>> _entrySet = _asMap.entrySet();
    for (final Map.Entry<String, Collection<NamedElement>> entry : _entrySet) {
      {
        final Collection<NamedElement> duplicates = entry.getValue();
        int _size = duplicates.size();
        boolean _greaterThan = (_size > 1);
        if (_greaterThan) {
          for (final NamedElement d : duplicates) {
            String _name_1 = d.getName();
            String _plus = ((("Duplicate " + desc) + " \'") + _name_1);
            String _plus_1 = (_plus + "\'");
            EAttribute _namedElement_Name = IoTDSLPackage.eINSTANCE.getNamedElement_Name();
            this.error(_plus_1, d, _namedElement_Name, 
              IoTDSLDuplicateValidator.DUPLICATE_NAME);
          }
        }
      }
    }
  }
}
