/*
 * generated by Xtext 2.10.0
 */
package be.unamur.iotdsl.xtext.tests.validation

import com.google.inject.Inject
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.eclipse.xtext.junit4.validation.ValidationTestHelper
import org.junit.Test
import org.junit.runner.RunWith

import iotdsl.IoTDSLPackage
import be.unamur.iotdsl.xtext.validation.IoTDSLDuplicateValidator
import be.unamur.iotdsl.xtext.tests.IoTDSLInjectorProvider
import iotdsl.IoTModel

//import static extension org.junit.Assert.*
//import static extension be.unamur.iotdsl.xtext.util.IoTDSLUtil.*

@RunWith(typeof(XtextRunner))
@InjectWith(typeof(IoTDSLInjectorProvider))
class IoTDSLDuplicateValidationTest{
	@Inject extension ParseHelper<IoTModel> 
	@Inject extension ValidationTestHelper 

//	@Test
//	def void DuplicateEnumerationName(){
//		val  model = '''
//			enumeration E {VALUE;}
//			enumeration E {VAL;}
//		'''.parse
//		val e = model.enumerations.get(0)
//		model.assertError(IoTDSLPackage::eINSTANCE.enumeration,
//				IoTDSLDuplicateValidator::DUPLICATE_NAME,
//				"Duplicate enumeration '" + e.name + "'")		
//	} 
//
//	@Test
//	def void NoDuplicateEnumerationName(){
//		'''
//			enumeration E{}
//			enumeration F{}
//		'''.parse.assertNoErrors
//	}
//
//	@Test
//	def void DuplicateEnumerationLiteralName(){
//		val model = '''
//			enumeration E{VAL; VAL;}
//		'''.parse
//		model.assertError(IoTDSLPackage::eINSTANCE.enumerationLiteral,
//			"Duplicate enumeration literal '" + "VAL" + "'",
//			IoTDSLDuplicateValidator::DUPLICATE_NAME)
//	}
//
//	@Test
//	def void NoDuplicateEnumerationLiteralName(){
//		'''
//			enumeration E{VAL; VALUE;}
//		'''.parse.assertNoErrors
//	}
//
//	@Test
//	def void DuplicateGatewayName(){
//		val model = '''
//			gateway gw
//			gateway gw
//		'''.parse
//		model.assertError(IoTDSLPackage::eINSTANCE.gateway,
//			IoTDSLDuplicateValidator::DUPLICATE_NAME,
//			"Duplicate gateway '" + "gw" + "'")
//	}
//
//	@Test
//	def void NoDuplicateGatewayName(){
//		'''
//			gateway gw
//			gateway gg
//		'''.parse.assertNoErrors
//	}
//	
	
	@Test
	def void DuplicateDeviceName(){
		'''
			device dev {}
			device dev {}
		'''.parse.assertError(IoTDSLPackage::eINSTANCE.device,
			IoTDSLDuplicateValidator::DUPLICATE_NAME,
			"Duplicate device 'dev'")
	}

	@Test
	def void NoDuplicateDeviceName(){
		'''
			device dev {}
			device d   {}
		'''.parse.assertNoErrors
	}
	
	
//	def private void assertDuplicate(String input, EClass type, String desc, String name) {
//		input.parse => [
//			// check that the error is on both duplicates
//			assertError(type,
//				IoTDSLDuplicateValidator.DUPLICATE_NAME,
//				input.indexOf(name), name.length,
//				"Duplicate " + desc + " '" + name + "'")
//			assertError(type,
//				IoTDSLDuplicateValidator.DUPLICATE_NAME,
//				input.lastIndexOf(name), name.length,
//				"Duplicate " + desc + " '" + name + "'")
//		]
//	}
	
}
