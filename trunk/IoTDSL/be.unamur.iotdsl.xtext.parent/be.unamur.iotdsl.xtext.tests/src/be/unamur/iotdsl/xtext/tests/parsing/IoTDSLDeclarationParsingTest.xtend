/*
 * generated by Xtext 2.10.0
 */
package be.unamur.iotdsl.xtext.tests.parsing

import be.unamur.iotdsl.xtext.tests.IoTDSLInjectorProvider
import com.google.inject.Inject
import iotdsl.IoTModel
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.eclipse.xtext.junit4.validation.ValidationTestHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith

import static extension be.unamur.iotdsl.xtext.util.IoTDSLUtil.*
import iotdsl.EventType

@RunWith(XtextRunner)
@InjectWith(IoTDSLInjectorProvider)
class IoTDSLDeclarationParsingTest{

	@Inject extension ParseHelper<IoTModel> 
	@Inject extension ValidationTestHelper
	
	@Test 
	def void loadModel() {
		val result = '''
			
		'''.parse
		Assert.assertNotNull(result)
	}

	@Test
	def void EnumerationWithoutLiterals(){
		val model = '''
			enumeration E {}
		'''.parse
		model.assertNoErrors
		val enum = model.enumerations
		Assert.assertEquals(1, enum.size)
		Assert.assertEquals("E", enum.get(0).name)				
	} 

	@Test
	def void EnumerationWithOneLiterals(){
		val model = '''
			enumeration E {VAL;}
		'''.parse
		model.assertNoErrors
		val enum = model.enumerations.get(0)
		val literals = enum.literals
		Assert.assertEquals(1, literals.size)
		Assert.assertEquals("VAL", literals.get(0).name)
	} 
	
	@Test
	def void EnumerationWithMultipleLiterals(){
		val model = '''
			enumeration E {VAL; LAV;}
		'''.parse
		model.assertNoErrors		
		Assert.assertEquals(2, 
			model.enumerations.get(0).literals.size)
	} 
	
	@Test
	def void GatewayDeclaration(){
		val model = '''
			gateway gw
		'''.parse
		model.assertNoErrors
		Assert.assertEquals(1, model.types.size)		
	} 
	
	@Test
	def void DeviceDeclarationWithoutFeatures(){
		val model = '''
			device dev{}
		'''.parse
		model.assertNoErrors
		Assert.assertEquals(1, model.devices.size)		
		Assert.assertEquals("dev", model.devices.get(0).name)
	} 
	
	@Test
	def void DeviceDeclarationWithOneProperty(){
		val model = '''
			device dev{
				property memory : integer
			}
		'''.parse
		model.assertNoErrors
		val properties = model.devices.get(0).properties
		Assert.assertEquals(1, properties.size)
		val prop = properties.get(0)
		Assert.assertEquals("memory", prop.name)
	} 

	@Test
	def void DeviceDeclarationWithOneSensingEvent(){
		val model = '''
			device dev{
				sensing E()
			}
		'''.parse
		model.assertNoErrors	
		val events = model.devices.get(0).events
		Assert.assertEquals(1, events.size)
		val event = events.get(0)
		Assert.assertEquals("E", event.name)
		Assert.assertEquals(event.kind,EventType.SENSING)	
	} 
	
	@Test
	def void DeviceDeclarationWithOneActuatingEvent(){
		val model = '''
			device dev{
				actuating F()
			}
		'''.parse
		Assert.assertEquals(model.devices.get(0).events.get(0).kind,EventType.ACTUATING)
		
	} 
	
	@Test
	def void DeviceDeclarationWithMixedEvent(){
		val model = '''
			device dev{
				sensing   E()
				actuating F()
			}
		'''.parse
		model.assertNoErrors
		Assert.assertEquals(2, model.devices.get(0).events.size)		
	} 

	@Test
	def void DeviceDeclarationWithOneParameterEvent(){
		val model = '''
			device dev{
				sensing   E(a : integer)
			}
		'''.parse
		model.assertNoErrors
		val params = model.devices.get(0).events.get(0).parameters
		Assert.assertEquals(1, params.size)
		Assert.assertEquals("a", params.get(0).name)
	} 

	@Test
	def void DeviceDeclarationWithManyParameterEvent(){
		val model = '''
			device dev{
				sensing   E(a : integer, b : integer)
			}
		'''.parse
		model.assertNoErrors		
		val params = model.devices.get(0).events.get(0).parameters
		Assert.assertEquals(2, params.size)
		Assert.assertEquals("a", params.get(0).name)
		Assert.assertEquals("b", params.get(1).name)
	} 

	@Test
	def void DeviceDeclarationWithMixedFeatures(){
		val model = '''
			device dev{
				property a : integer
				property b : boolean
				property c : string
				property d : real
				sensing   E()
				actuating F(a : integer, b : integer)
			}
		'''.parse
		model.assertNoErrors
		val device = model.devices.get(0)
		val props  = device.properties
		val events = device.events
		Assert.assertEquals(4, props.size)
		Assert.assertEquals(2, events.size)
		Assert.assertEquals(2, events.get(1).parameters.size)
	} 
}


