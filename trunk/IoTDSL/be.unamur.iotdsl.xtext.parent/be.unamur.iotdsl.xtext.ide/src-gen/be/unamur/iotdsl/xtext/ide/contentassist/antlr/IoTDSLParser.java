/*
 * generated by Xtext 2.10.0
 */
package be.unamur.iotdsl.xtext.ide.contentassist.antlr;

import be.unamur.iotdsl.xtext.ide.contentassist.antlr.internal.InternalIoTDSLParser;
import be.unamur.iotdsl.xtext.services.IoTDSLGrammarAccess;
import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class IoTDSLParser extends AbstractContentAssistParser {

	@Inject
	private IoTDSLGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalIoTDSLParser createParser() {
		InternalIoTDSLParser result = new InternalIoTDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getNamedElementAccess().getAlternatives(), "rule__NamedElement__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getDeclaredTypeAccess().getAlternatives(), "rule__DeclaredType__Alternatives");
					put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
					put(grammarAccess.getNodeAccess().getAlternatives(), "rule__Node__Alternatives");
					put(grammarAccess.getGatewayAccess().getAlternatives_1(), "rule__Gateway__Alternatives_1");
					put(grammarAccess.getNamedTypedElementAccess().getAlternatives(), "rule__NamedTypedElement__Alternatives");
					put(grammarAccess.getFeatureAccess().getAlternatives(), "rule__Feature__Alternatives");
					put(grammarAccess.getTypeReferenceAccess().getAlternatives(), "rule__TypeReference__Alternatives");
					put(grammarAccess.getEventTypeAccess().getAlternatives(), "rule__EventType__Alternatives");
					put(grammarAccess.getIoTModelAccess().getGroup(), "rule__IoTModel__Group__0");
					put(grammarAccess.getEnumerationAccess().getGroup(), "rule__Enumeration__Group__0");
					put(grammarAccess.getEnumerationAccess().getGroup_3(), "rule__Enumeration__Group_3__0");
					put(grammarAccess.getEnumerationLiteralAccess().getGroup(), "rule__EnumerationLiteral__Group__0");
					put(grammarAccess.getIntegerTypeAccess().getGroup(), "rule__IntegerType__Group__0");
					put(grammarAccess.getBooleanTypeAccess().getGroup(), "rule__BooleanType__Group__0");
					put(grammarAccess.getStringTypeAccess().getGroup(), "rule__StringType__Group__0");
					put(grammarAccess.getRealTypeAccess().getGroup(), "rule__RealType__Group__0");
					put(grammarAccess.getGatewayAccess().getGroup(), "rule__Gateway__Group__0");
					put(grammarAccess.getDeviceAccess().getGroup(), "rule__Device__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
					put(grammarAccess.getEventAccess().getGroup_2(), "rule__Event__Group_2__0");
					put(grammarAccess.getEventAccess().getGroup_2_1(), "rule__Event__Group_2_1__0");
					put(grammarAccess.getEventAccess().getGroup_2_1_1(), "rule__Event__Group_2_1_1__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getIoTModelAccess().getTypesAssignment_1(), "rule__IoTModel__TypesAssignment_1");
					put(grammarAccess.getEnumerationAccess().getNameAssignment_1(), "rule__Enumeration__NameAssignment_1");
					put(grammarAccess.getEnumerationAccess().getLiteralsAssignment_3_0(), "rule__Enumeration__LiteralsAssignment_3_0");
					put(grammarAccess.getEnumerationLiteralAccess().getNameAssignment_1(), "rule__EnumerationLiteral__NameAssignment_1");
					put(grammarAccess.getIntegerTypeAccess().getNameAssignment_1(), "rule__IntegerType__NameAssignment_1");
					put(grammarAccess.getBooleanTypeAccess().getNameAssignment_1(), "rule__BooleanType__NameAssignment_1");
					put(grammarAccess.getStringTypeAccess().getNameAssignment_1(), "rule__StringType__NameAssignment_1");
					put(grammarAccess.getRealTypeAccess().getNameAssignment_1(), "rule__RealType__NameAssignment_1");
					put(grammarAccess.getGatewayAccess().getNameAssignment_2(), "rule__Gateway__NameAssignment_2");
					put(grammarAccess.getDeviceAccess().getNameAssignment_2(), "rule__Device__NameAssignment_2");
					put(grammarAccess.getDeviceAccess().getFeaturesAssignment_4(), "rule__Device__FeaturesAssignment_4");
					put(grammarAccess.getPropertyAccess().getNameAssignment_1(), "rule__Property__NameAssignment_1");
					put(grammarAccess.getPropertyAccess().getTypeAssignment_3(), "rule__Property__TypeAssignment_3");
					put(grammarAccess.getEventAccess().getKindAssignment_0(), "rule__Event__KindAssignment_0");
					put(grammarAccess.getEventAccess().getNameAssignment_1(), "rule__Event__NameAssignment_1");
					put(grammarAccess.getEventAccess().getParametersAssignment_2_1_0(), "rule__Event__ParametersAssignment_2_1_0");
					put(grammarAccess.getEventAccess().getParametersAssignment_2_1_1_1(), "rule__Event__ParametersAssignment_2_1_1_1");
					put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
					put(grammarAccess.getParameterAccess().getTypeAssignment_2(), "rule__Parameter__TypeAssignment_2");
					put(grammarAccess.getTypeReferenceAccess().getPtypeAssignment_0(), "rule__TypeReference__PtypeAssignment_0");
					put(grammarAccess.getTypeReferenceAccess().getDtypeAssignment_1(), "rule__TypeReference__DtypeAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalIoTDSLParser typedParser = (InternalIoTDSLParser) parser;
			typedParser.entryRuleIoTModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public IoTDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(IoTDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
