/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.cep.validation

import org.eclipse.xtext.validation.Check
import org.xtext.example.cep.cep.AttributEvent
import org.xtext.example.cep.cep.CepPackage
import org.xtext.example.cep.cep.Event

import static extension util.CepUtil.*
import org.xtext.example.cep.cep.AttributInstance
import org.xtext.example.cep.cep.EventInstance
import typing.CepTypeProvider

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class CepValidator extends AbstractCepValidator {
	
	public static val DUPLICATE_ATTRIBUT_EVENT       = "DUPLICATE_ATTRIBUT_EVENT" 
	public static val DUPLICATE_EVENEMENT            = "DUPLICATE_EVENEMENT" 
	public static val NOTEXISTED_ATTRIBUT_EVENT      = "ATTRIBUT_NO_EXISTED" 
	public static val CONFORM_ATTRIBUT_EVENT      =        "TYPE_NOT_CONFORM" 

    @Check
    def   checkNoDuplicateAttribut(AttributEvent aEvent)  {
    	
    	if(aEvent.containingEvent.attributEvent.exists[it != aEvent && it.name == aEvent.name ])
               
             error("Duplicate attribut evenement '" + aEvent.name + "'",
             CepPackage::eINSTANCE.attributEvent_Name,
             DUPLICATE_ATTRIBUT_EVENT)
                   
                   
                   }
			
    @Check
    def   checkNoDuplicateEvenement(Event event)  {	
    	if(event.containingModel.events.exists[it != event && it.name == event.name ])
             error("Duplicate Evenement '" + event.name + "'",
             	CepPackage::eINSTANCE.event_Name,
             	DUPLICATE_EVENEMENT)
    }
   
	 @Check
    def   checkNotExistAttributEvent(AttributInstance attributInstance)  {
			 
    	if(!attributInstance.containingEventInstance.evenementInstance.attributEvent.exists[ it.name == attributInstance.attributNameInstance ])
             error("NonExisted attribute'" + attributInstance.attributNameInstance + "'",
             	CepPackage::eINSTANCE.attributInstance_AttributNameInstance,
             	NOTEXISTED_ATTRIBUT_EVENT)
    }
   
	 @Check
    def   checkNotTypeDeclaredAttributEventInstance(AttributInstance attributInstance)  {
    	
    	if( attributInstance.containingEventInstance.evenementInstance.attributEvent
    	.exists[it.name == attributInstance.attributNameInstance && it.type.name !=CepTypeProvider.typeFor(attributInstance.attributExpression)  ])
    //	.exists[it.name == attributInstance.attributNameInstance && it.type != CepTypeProvider.typeFor(attributInstance.attributExpression)  ])
		 error(" Type Declaration TYPE'" + attributInstance.attributNameInstance + "'",
             	CepPackage::eINSTANCE.attributInstance_AttributNameInstance,
             	CONFORM_ATTRIBUT_EVENT)	 
             	//
   
    }
	
}
