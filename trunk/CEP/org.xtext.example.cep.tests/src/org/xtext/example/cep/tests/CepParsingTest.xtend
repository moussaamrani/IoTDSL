/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.cep.tests

import com.google.inject.Inject
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper

import org.junit.Test
import org.junit.runner.RunWith
import org.xtext.example.cep.cep.Model
import org.junit.Assert
import org.eclipse.xtext.junit4.validation.ValidationTestHelper
import org.xtext.example.cep.cep.CepPackage

@RunWith(typeof(XtextRunner))
@InjectWith(typeof(CepInjectorProvider))


class CepParsingTest{

@Inject extension ParseHelper<Model>
@Inject extension ValidationTestHelper
	




      @Test
      def void testParsingEventempty() {
		'''
			Event Temp	  
				{ 
				
				 
				 }
		'''.parse.assertNoErrors
	 
		
	}
	
	
	@Test
      def void testParsingEventOneOccurence() {
		val model = '''
			Event Temp	  
				{ 
				
				   
				 }
		'''.parse
		model.assertNoErrors
	 
	    val event = model.events.get(0)	
        Assert::assertEquals("Temp", event.name)		
	
		}
		
		
		
		@Test
      def void testParsingEventTwoOccurence() {
		val model = '''
			Event Temp	  
				{ 			 }
			
			Event Wind	  
							{ 			 }
		'''.parse
		model.assertNoErrors
	 
	    val event = model.events.get(0)	
        Assert::assertEquals("Temp", event.name)		
        
        val event2 = model.events.get(1)	
        Assert::assertEquals("Wind", event2.name)	
	
		}
	
	
	@Test
      def void testParsingAttributeEventOneOccurence() {
		val model = '''
			Event Temp	  
				{ 			
				temprerature : integer	
				}
		'''.parse
		model.assertNoErrors
	 
	    val event = model.events.get(0)	
	    val attributEvent = event.attributEvent.get(0)
        Assert::assertEquals("temprerature", attributEvent.name)		
        
       	
		}
	
	
	@Test
      def void testParsingAttributeEventTwoOccurence() {
		val model = '''
			Event Temp	  
				{ 			
				temprerature : integer	
				room : integer
				}
		'''.parse
		model.assertNoErrors
	 
	    val event = model.events.get(0)	
	    val attributEvent = event.attributEvent.get(0)
        Assert::assertEquals("temprerature", attributEvent.name)	
        
       
	    val attributEvent2 = event.attributEvent.get(1)
        Assert::assertEquals("room", attributEvent2.name)		
        
       	
		}
	
	
	
	@Test
      def void testEventInstanceOneOccurence() {
		val model = '''
			Event Temp	  
				{ 			
				temprerature : integer	
				room : integer
				}
				
				Temp@0{temprerature=10 room=15} ;
		'''.parse
		model.assertNoErrors
		}
	
	
	
	
	@Test
      def void testEventInstanceTwoOccurences() {
		val model = '''
			Event Temp	  
				{ 			
				temprerature : integer	
				room : integer
				}
				
		    Event Wind	  
		    	{ 			
		    	Vitesse : integer	
		    	}
		    				
				
				Temp@0{temprerature=10 room=15} ;
				Temp@0{temprerature=10 room=15} ;
				Wind@0{Vitesse=12};
		'''.parse
		model.assertNoErrors
		}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

}


