// automatically generated by Xtext
grammar be.unamur.iotdevice.IoTDevice with org.eclipse.xtext.common.Terminals

import "https://www.unamur.be/IoTDevice" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

IoTModel returns IoTModel:
	{IoTModel} 
	(types+=Type)* 
	(networkconfiguration+=NetworkConfiguration)* 
	(rules+=Rule)* 
;

Type returns Type:
	Cloud | Gateway | Router | Device | Enumeration | PrimitiveType;

Enumeration:
	'enumeration' name=EString '{'
		(literals += EnumerationLiteral ';')+
	'}'
;
EnumerationLiteral:
	{EnumerationLiteral} name=EString
;

Cloud returns Cloud:
	{Cloud} 'cloud' name=EString;

Gateway returns Gateway:
	{Gateway} 'gateway' name=EString;

Router returns Router:
	{Router} 'router' name=EString;

Device returns Device:
	{Device} 'device' name=EString '{' capabilities+=Capability* '}';

Capability returns Capability:
	Sensing | Actuating;

Sensing returns Sensing:
	{Sensing} 'sensing' name=EString '(' 
		(parameters += Parameter (',' parameters += Parameter)*)? 
	')'
;

Actuating returns Actuating:
	{Actuating}
	'actuating' name=EString '(' 
		(parameters += Parameter (',' parameters += Parameter)*)? 
	')'
;

Parameter returns Parameter:
	name=EString ':' type=[Type|EString]
;

PrimitiveType:
	IntegerType | BooleanType | StringType | RealType
;
IntegerType: {IntegerType} "Integer";
BooleanType: {BooleanType} "Boolean";
StringType:  {StringType}  "String";
RealType:    {RealType} "Real";






NetworkConfiguration returns NetworkConfiguration:
	{NetworkConfiguration} 'configuration' name=EString '{'
        (nodes+=NodeInstance)* 
		(paths+=CommunicationPath)*
	'}'
;

NodeInstance returns NodeInstance:
	'node' name=EString ':' type=[Node|EString] 
;

CommunicationPath returns CommunicationPath:
	'from' src=[NodeInstance|EString] 'to' tgt=[NodeInstance|EString] 'via' protocol=Protocol
;

enum Protocol returns Protocol:
				IP = 'IP' | ZWAVE = 'ZWAVE' | ZIGBEE = 'ZIGBEE';



Rule returns Rule:
	'Rule' name=EString ':'
		'when' '(' trigger=Trigger ')' 'do' '{' reaction=Reaction '}'
;

Trigger returns Trigger:
	Event ({CompositeTrigger.lhs=current} op=TriggerOp rhs=Event)*
;

Event returns Event:
	{Event} event=[Sensing|EString]
;

Reaction returns Reaction:
	CapabilityReference ({CompositeReaction.lhs=current} op=ReactionOp rhs=CapabilityReference)*
;

CapabilityReference returns CapabilityReference:
	capability=[Capability|EString]
;

enum TriggerOp returns TriggerOp:
	AND = 'and' | OR = 'or'
;
enum ReactionOp returns ReactionOp:
	SEQ = ';' | PAR = '||'
;

EString returns ecore::EString:
	STRING | ID;










