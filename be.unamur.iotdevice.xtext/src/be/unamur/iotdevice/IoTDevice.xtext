// automatically generated by Xtext
grammar be.unamur.iotdevice.IoTDevice with org.eclipse.xtext.common.Terminals

import "https://www.unamur.be/IoTDevice" 
//import "http://www.eclipse.org/emf/2002/Ecore" as ecore

IoTModel returns IoTModel:
	{IoTModel} 
	(types+=Type)* 
	(configuration+=NetworkConfiguration)* 
	(rules+=Rule)* 
;

Type returns Type:
	DeclaredType | PrimitiveType;

DeclaredType: 
	Node | Enumeration 
;

Enumeration:
	'enumeration' name=ValidID '{'
		(literals += EnumerationLiteral ';')*
	'}'
;
EnumerationLiteral:
	{EnumerationLiteral} name=ValidID
;

Node returns Node:
	Cloud | Gateway | Router | Device
;

Cloud returns Cloud:
	{Cloud} 'cloud' name=ValidID;

Gateway returns Gateway:
	{Gateway} 'gateway' name=ValidID;

Router returns Router:
	{Router} 'router' name=ValidID;

Device returns Device:
	{Device} 'device' name=ValidID '{' capabilities+=Capability* '}';

Capability returns Capability:
	Sensing | Actuating;

Sensing returns Sensing:
	{Sensing} 'sensing' name=ValidID '(' 
		(parameters += Parameter (',' parameters += Parameter)*)? 
	')'
;

Actuating returns Actuating:
	{Actuating}
	'actuating' name=ValidID '(' 
		(parameters += Parameter (',' parameters += Parameter)*)? 
	')'
;

Parameter returns Parameter:
	name=ValidID ':' type=TypeReference
;

TypeReference:
	ptype = PrimitiveType | dtype = [DeclaredType|QualifiedName]
;

PrimitiveType:
	IntegerType | BooleanType | StringType | RealType
;
IntegerType: {IntegerType} name="integer";
BooleanType: {BooleanType} name="boolean";
StringType:  {StringType}  name="string";
RealType:    {RealType} name="real";






NetworkConfiguration returns NetworkConfiguration:
	{NetworkConfiguration} 'configuration' name=ValidID '{'
        (nodes+=NodeInstance)* 
		(paths+=CommunicationPath)*
	'}'
;

NodeInstance returns NodeInstance:
	'node' name=ValidID ':' type=[Node|ValidID] 
;

CommunicationPath returns CommunicationPath:
	'from' src=[NodeInstance|ValidID] 'to' tgt=[NodeInstance|ValidID] 'via' protocol=Protocol
;

enum Protocol returns Protocol:
				IP = 'IP' | ZWAVE = 'ZWAVE' | ZIGBEE = 'ZIGBEE';






Rule returns Rule:
	'rule' name=ValidID ':'
		'when' '(' trigger=Expression ')' 'do' '{' reaction=Reaction '}'
;

//Trigger returns Trigger:
//	exp=Expression 
//;

Reaction returns Reaction: ParallelComposition;

ParallelComposition returns Reaction: 
	SeqComposition ({ParallelComposition.lhs=current} '||' rhs=SeqComposition)*
;

SeqComposition returns Reaction:
	SimpleReaction ({SeqComposition.lhs=current} ';' rhs=SimpleReaction)*
;

SimpleReaction returns SimpleReaction:
	exp=Expression
;



Expression returns Expression: OrExpression;

OrExpression returns Expression:
		AndExpression ({OrExpression.lhs=current} op="or" rhs=AndExpression)*
;

AndExpression returns Expression:
	EqualityExpression ({AndExpression.lhs=current} op="and"  rhs=EqualityExpression)*
;

EqualityExpression returns Expression:
	RelationalExpression ({EqualityExpression.lhs=current} op=("=="|"!=") rhs=RelationalExpression)*
;

RelationalExpression returns Expression:
	AdditiveExpression (
		  {ComparativeExpression.lhs=current} op=("<"|">"|"<="|">=") rhs=AdditiveExpression
	)*
;

AdditiveExpression returns Expression:
	MultiplicativeExpression ({AdditiveExpression.lhs=current} op=("+"|"-") rhs=MultiplicativeExpression)*
;

MultiplicativeExpression returns Expression:
	UnaryExpression ({MultiplicativeExpression.lhs=current} op=("*"|"/") rhs=UnaryExpression)*
;

UnaryExpression returns Expression:
	  {NotExpression}   op="not" operand=UnaryExpression |
	  {PlusExpression}  op="+"   operand=UnaryExpression |
	  {MinusExpression} op="-"   operand=UnaryExpression | 
	  CapabilitySelection
;


CapabilitySelection returns Expression:
	PrimaryExpression ( =>(
		  {CapabilitySelection.receiver=current} '.') capability=[Capability|ValidID]  
		  	'(' (args += Expression (',' args += Expression)* )?  ')'
		)*
;

PrimaryExpression returns Expression:
	ParenthesizedExpression | LiteralExpression | Target
;

ParenthesizedExpression returns Expression:
	'(' Expression ')'
;

Target:
	ref=[NodeInstance|ValidID]
;

LiteralExpression returns LiteralExpression:
	{IntegerLiteral} value=INT |
	{StringLiteral} value=STRING |
	{EnumLiteral} enumeration=[Enumeration|QualifiedName] '::' literal=[EnumerationLiteral] |
	{BooleanLiteral} ('false' | isTrue ?= 'true') 
;

QualifiedName:
  ValidID (=>'.' ValidID)*
;

ValidID:
	ID
;
