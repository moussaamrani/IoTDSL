/*
 * generated by Xtext
 */
package be.unamur.iotdevice.scoping

import IoTDevice.CapabilitySelection
import IoTDevice.Device
import IoTDevice.EnumLiteral
import IoTDevice.Enumeration
import IoTDevice.NodeInstance
import IoTDevice.Type
import be.unamur.iotdevice.typing.IoTDeviceTypeProvider
import com.google.inject.Inject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 *
 */
class IoTDeviceScopeProvider extends AbstractDeclarativeScopeProvider {

	@Inject extension IoTDeviceTypeProvider
	
	def scope_EnumerationLiteral(EnumLiteral lit, EReference ref) {
		var parentScope = IScope::NULLSCOPE
		if (lit.enumeration instanceof Enumeration)
			return Scopes::scopeFor((lit.enumeration as Enumeration).literals, parentScope)
		else
			return parentScope
	}
	
	def scope_CapabilitySelection_capability(CapabilitySelection sel, EReference ref) {
		var parentScope = IScope::NULLSCOPE
		var Type type = sel.receiver.typeFor
		if(!(type instanceof NodeInstance)){
			val capabilities = (type as Device).capabilities
			return Scopes::scopeFor(capabilities, parentScope)
		}
	}
	
}
